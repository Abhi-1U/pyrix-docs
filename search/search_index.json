{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pyrix Well often times in the process of evolution we come across new stuff. Pyrix is one of them . Pyrix is a Clean-Room implemented Module/Library which allows for improved , More intuitive Operations with Matrices and some of its related Fields such as vectors and linear Algebra. Pyrix is a complete clean implementation in python Language with no external dependencies. Getting Started with Pyrix For Python3 enviornment one can install the package with pip 1 python - m pip install pyrix * some operating systems see pip for python2 and pip3 for python3 ,in that case 1 python3 - m pip install pyrix Download Source code Download :fontawesome-solid-arrow-alt-circle-down: Repository :fontawesome-solid-external-link-square-alt:","title":"Home"},{"location":"#pyrix","text":"Well often times in the process of evolution we come across new stuff. Pyrix is one of them . Pyrix is a Clean-Room implemented Module/Library which allows for improved , More intuitive Operations with Matrices and some of its related Fields such as vectors and linear Algebra. Pyrix is a complete clean implementation in python Language with no external dependencies.","title":"Pyrix"},{"location":"#getting-started-with-pyrix","text":"For Python3 enviornment one can install the package with pip 1 python - m pip install pyrix * some operating systems see pip for python2 and pip3 for python3 ,in that case 1 python3 - m pip install pyrix","title":"Getting Started with Pyrix"},{"location":"#download-source-code","text":"Download :fontawesome-solid-arrow-alt-circle-down: Repository :fontawesome-solid-external-link-square-alt:","title":"Download Source code"},{"location":"Download/","text":"Download Pyrix One can download pyrix directly from PYPI or pip: 1. PYPI : https://pypi.org/project/pyrix/ 2. Using pip : 1 pip install pyrix Download Releases V0.7.17rc1(pre-release) Release Date : 28-09-2020 Tag Link : v0.7.17rc1 Change-Log : Bug Fixes Removed Unused/half baked features Character Matrix Feature added CI builds for different Architecture Automated Unit Tests and Code Coverage Enhanced Performance in some aspects as compared to previous version Assets : pyrix-0.7.17rc1-py3-none-any.whl pyrix-0.7.17rc1.tar.gz Source code(zip) Source code(tar.gz) V0.7.17rc0(pre-release) Release Date : 29-08-2020 Tag Link : v0.7.17rc0 Change-Log : Stability Update Fixed Circular Imports Minor Fixes New Features : Character Matrix(Upcoming/Currently in development) Assets : pyrix-0.7.17rc0-py3-none-any.whl pyrix-0.7.17rc0.tar.gz Source code(zip) Source code(tar.gz)","title":"Download Pyrix"},{"location":"Download/#download-pyrix","text":"One can download pyrix directly from PYPI or pip: 1. PYPI : https://pypi.org/project/pyrix/ 2. Using pip : 1 pip install pyrix","title":"Download Pyrix"},{"location":"Download/#download-releases","text":"V0.7.17rc1(pre-release)","title":"Download Releases"},{"location":"Download/#release-date-28-09-2020","text":"","title":"Release Date : 28-09-2020"},{"location":"Download/#tag-link-v0717rc1","text":"","title":"Tag Link : v0.7.17rc1"},{"location":"Download/#change-log","text":"Bug Fixes Removed Unused/half baked features Character Matrix Feature added CI builds for different Architecture Automated Unit Tests and Code Coverage Enhanced Performance in some aspects as compared to previous version","title":"Change-Log :"},{"location":"Download/#assets","text":"pyrix-0.7.17rc1-py3-none-any.whl pyrix-0.7.17rc1.tar.gz Source code(zip) Source code(tar.gz) V0.7.17rc0(pre-release)","title":"Assets :"},{"location":"Download/#release-date-29-08-2020","text":"","title":"Release Date : 29-08-2020"},{"location":"Download/#tag-link-v0717rc0","text":"","title":"Tag Link : v0.7.17rc0"},{"location":"Download/#change-log_1","text":"Stability Update Fixed Circular Imports Minor Fixes","title":"Change-Log :"},{"location":"Download/#new-features","text":"Character Matrix(Upcoming/Currently in development)","title":"New Features :"},{"location":"Download/#assets_1","text":"pyrix-0.7.17rc0-py3-none-any.whl pyrix-0.7.17rc0.tar.gz Source code(zip) Source code(tar.gz)","title":"Assets :"},{"location":"Release/","text":"Release History Stable V0.7.17 Release Date : 18-12-2020 Tag Link : v0.7.17 Change-Log : Updated DocStrings Fixed Many Casting issues Charactar Matrix Feature More Code Coverage Minor Bug fixes Documentation Website UP Assets : :fontawesome-solid-arrow-alt-circle-down: pyrix-0.7.17-py3-none-any.whl :fontawesome-solid-arrow-alt-circle-down: pyrix-0.7.17.tar.gz :fontawesome-solid-file-archive: Source code(zip) :fontawesome-solid-file-archive: Source code(tar.gz) V0.7.17rc1 (Pre-Release) Release Date : 28-09-2020 Tag Link : v0.7.17rc1 Change-Log : Bug Fixes Removed Unused/half baked features Character Matrix Feature added CI builds for different Architecture Automated Unit Tests and Code Coverage Enhanced Performance in some aspects as compared to previous version Assets : :fontawesome-solid-arrow-alt-circle-down: pyrix-0.7.17rc1-py3-none-any.whl :fontawesome-solid-arrow-alt-circle-down: pyrix-0.7.17rc1.tar.gz :fontawesome-solid-file-archive: Source code(zip) :fontawesome-solid-file-archive: Source code(tar.gz) V0.7.17rc0 (Pre-Release) Release Date : 29-08-2020 Tag Link : v0.7.17rc0 Change-Log : Stability Update Fixed Circular Imports Minor Fixes New Features : Character Matrix(Upcoming/Currently in development) Assets : :fontawesome-solid-arrow-alt-circle-down: pyrix-0.7.17rc0-py3-none-any.whl :fontawesome-solid-arrow-alt-circle-down: pyrix-0.7.17rc0.tar.gz :fontawesome-solid-file-archive: Source code(zip) :fontawesome-solid-file-archive: Source code(tar.gz) Alpha V0.8.XX Working on Adding SI/custom Unit support to matrix and further expand on that functionality alone. For More Updates : :fontawesome-solid-external-link-square-alt: Pyrix Alpha Branch Nightly Nightly Edge Build Nightly Builds are usually the very latest release. Which could be partially in development or house some bugs, but they are totally worth it if the adventure involved or the extra features are what you need. Git Clone: 1 git clone https://github.com/Abhi-1U/pyrix.git Assets : :fontawesome-solid-file-archive: Source code(zip) Deprecation No Major Deprecations yet","title":"Releases"},{"location":"Release/#release-history","text":"Stable","title":"Release History"},{"location":"Release/#v0717","text":"","title":"V0.7.17"},{"location":"Release/#release-date-18-12-2020","text":"","title":"Release Date : 18-12-2020"},{"location":"Release/#tag-link-v0717","text":"","title":"Tag Link : v0.7.17"},{"location":"Release/#change-log","text":"Updated DocStrings Fixed Many Casting issues Charactar Matrix Feature More Code Coverage Minor Bug fixes Documentation Website UP","title":"Change-Log :"},{"location":"Release/#assets","text":":fontawesome-solid-arrow-alt-circle-down: pyrix-0.7.17-py3-none-any.whl :fontawesome-solid-arrow-alt-circle-down: pyrix-0.7.17.tar.gz :fontawesome-solid-file-archive: Source code(zip) :fontawesome-solid-file-archive: Source code(tar.gz)","title":"Assets :"},{"location":"Release/#v0717rc1-pre-release","text":"","title":"V0.7.17rc1 (Pre-Release)"},{"location":"Release/#release-date-28-09-2020","text":"","title":"Release Date : 28-09-2020"},{"location":"Release/#tag-link-v0717rc1","text":"","title":"Tag Link : v0.7.17rc1"},{"location":"Release/#change-log_1","text":"Bug Fixes Removed Unused/half baked features Character Matrix Feature added CI builds for different Architecture Automated Unit Tests and Code Coverage Enhanced Performance in some aspects as compared to previous version","title":"Change-Log :"},{"location":"Release/#assets_1","text":":fontawesome-solid-arrow-alt-circle-down: pyrix-0.7.17rc1-py3-none-any.whl :fontawesome-solid-arrow-alt-circle-down: pyrix-0.7.17rc1.tar.gz :fontawesome-solid-file-archive: Source code(zip) :fontawesome-solid-file-archive: Source code(tar.gz)","title":"Assets :"},{"location":"Release/#v0717rc0-pre-release","text":"","title":"V0.7.17rc0 (Pre-Release)"},{"location":"Release/#release-date-29-08-2020","text":"","title":"Release Date : 29-08-2020"},{"location":"Release/#tag-link-v0717rc0","text":"","title":"Tag Link : v0.7.17rc0"},{"location":"Release/#change-log_2","text":"Stability Update Fixed Circular Imports Minor Fixes","title":"Change-Log :"},{"location":"Release/#new-features","text":"Character Matrix(Upcoming/Currently in development)","title":"New Features :"},{"location":"Release/#assets_2","text":":fontawesome-solid-arrow-alt-circle-down: pyrix-0.7.17rc0-py3-none-any.whl :fontawesome-solid-arrow-alt-circle-down: pyrix-0.7.17rc0.tar.gz :fontawesome-solid-file-archive: Source code(zip) :fontawesome-solid-file-archive: Source code(tar.gz) Alpha","title":"Assets :"},{"location":"Release/#v08xx","text":"Working on Adding SI/custom Unit support to matrix and further expand on that functionality alone.","title":"V0.8.XX"},{"location":"Release/#for-more-updates","text":":fontawesome-solid-external-link-square-alt: Pyrix Alpha Branch Nightly","title":"For More Updates :"},{"location":"Release/#nightly-edge-build","text":"Nightly Builds are usually the very latest release. Which could be partially in development or house some bugs, but they are totally worth it if the adventure involved or the extra features are what you need.","title":"Nightly Edge Build"},{"location":"Release/#git-clone","text":"1 git clone https://github.com/Abhi-1U/pyrix.git","title":"Git Clone:"},{"location":"Release/#assets_3","text":":fontawesome-solid-file-archive: Source code(zip) Deprecation","title":"Assets :"},{"location":"Release/#no-major-deprecations-yet","text":"","title":"No Major Deprecations yet"},{"location":"binint/","text":"Introduction Inheritance from Matrix Class Binary Matrix is a special subset of matrices in general , which reflects in Pyrix as well by Inheriting all of the methods used in the traditional Matrix class . Instead or reinventing the wheel i have extended the Matrix class as a superclass of BinaryMatrix class. Some Methods which are Unique to Binary Matrices are implemented in the sub class hence defining the changes. So instead of discussing all methods of Matrix class again, i will discuss what are the changes and new exclusive Methods again Categorized in a similar fashion. Apparently some methods when applied to binary matrices will completely change its form and with that transformation or function the binaryMatrix will no longer remain a Binary Matrix . For Example using scaleMatrix() method will scale a binaryMatrix but since it has the potential to change the definition of binary matrix where the \"1s\" values would be scaled by a certain scalar and hence will be automatically TypeCasted into Traditional Matrix Object. Another way to maintain integrity is through typechecking as a precautionary step in Critical methods and function calls to keep a track on changes and retaining the binary Nature of these matrices intact. Category 0 : BinaryMatrix DataType Category 1 : Base Class Methods and Operator Overriding Methods Method Description 1. __init__() Initializer constructor method 2. __repr__() Describes/represents the object and returns sensible/expected values. 3. __str__() String value of the Object. 4. __add__() Addition of two binary matrices [ operator override ]. 5. __sub__() Subtraction of two binary matrices [ operator override ]. 6. __lshift__() Left Logical shift on the binary data. [ operator override ]. 7. __rshift__() Right Logical shift on the binary data. [ operator override ]. 8. __and__() Shorthand operator for Boolean AND is implemented [ operator override ]. 9. __or__() Shorthand operator for Boolean OR is implemented[ operator override ]. 10. __xor__() Shorthand operator for Boolean XOR is implemented[ operator override ]. 11. __invert__() Shorthand operator for Boolean NOT(Invert) is implemented[ operator override ]. These Methods are extensions for adding operator support to custom BinaryMatrix object type. Some of these methods described here override the methods in the super class. Other Category 1 methods not described here are inherited directly. Category 2 : Matrix Analysis Methods Other Methods are described in depth in here( Analysis Methods ) Method Description 1. isBinaryMatrix() This method checks if the Matrix in question is a BinaryMatrix any-more. Returns boolean value. Category 3 : Intra-Matrix Methods All Methods are described in depth in here( Intra-Matrix Methods ) Category 4: Inter-Matrix Methods All Methods are described in depth in here( Inter-Matrix Methods ) Category 5: Matrix Transformations All Methods are described in depth in here( Matrix Transformations ) Category 6: Statistical Methods All Methods are described in depth in here( Statistical Methods ) Category 7: Supplementary Methods All Methods are described in depth in here( Supplementary Methods ) Category 8 : Binary/Boolean Logic Methods These methods execute boolean logic on the binary matrices especially for 1-bit Emulated ones. Method Description 1. And() 2. Or() 3. Not() 4. Nand() 5. Nor() 6. Exor() 7. ExNor() 8. onesComplement() 9. twosComplement() 10. __AndS() 11. __Or() 12. __Not() 13. __Nand() 14. __Nor() 15. __EXNor() 16. __Exor() 17. __forward_one() Category 9 : Shift Methods These methods add binary shifts to the matrix as a whole. Method Description 1. logicalShift() 2. arithmeticShift() 3. circularShift() 4. popcount() 5. __listifyMatrix()","title":"introduction"},{"location":"binint/#introduction","text":"","title":"Introduction"},{"location":"binint/#inheritance-from-matrix-class","text":"Binary Matrix is a special subset of matrices in general , which reflects in Pyrix as well by Inheriting all of the methods used in the traditional Matrix class . Instead or reinventing the wheel i have extended the Matrix class as a superclass of BinaryMatrix class. Some Methods which are Unique to Binary Matrices are implemented in the sub class hence defining the changes. So instead of discussing all methods of Matrix class again, i will discuss what are the changes and new exclusive Methods again Categorized in a similar fashion. Apparently some methods when applied to binary matrices will completely change its form and with that transformation or function the binaryMatrix will no longer remain a Binary Matrix . For Example using scaleMatrix() method will scale a binaryMatrix but since it has the potential to change the definition of binary matrix where the \"1s\" values would be scaled by a certain scalar and hence will be automatically TypeCasted into Traditional Matrix Object. Another way to maintain integrity is through typechecking as a precautionary step in Critical methods and function calls to keep a track on changes and retaining the binary Nature of these matrices intact.","title":"Inheritance from Matrix Class"},{"location":"binint/#category-0-binarymatrix-datatype","text":"","title":"Category 0 : BinaryMatrix DataType"},{"location":"binint/#category-1-base-class-methods-and-operator-overriding-methods","text":"Method Description 1. __init__() Initializer constructor method 2. __repr__() Describes/represents the object and returns sensible/expected values. 3. __str__() String value of the Object. 4. __add__() Addition of two binary matrices [ operator override ]. 5. __sub__() Subtraction of two binary matrices [ operator override ]. 6. __lshift__() Left Logical shift on the binary data. [ operator override ]. 7. __rshift__() Right Logical shift on the binary data. [ operator override ]. 8. __and__() Shorthand operator for Boolean AND is implemented [ operator override ]. 9. __or__() Shorthand operator for Boolean OR is implemented[ operator override ]. 10. __xor__() Shorthand operator for Boolean XOR is implemented[ operator override ]. 11. __invert__() Shorthand operator for Boolean NOT(Invert) is implemented[ operator override ]. These Methods are extensions for adding operator support to custom BinaryMatrix object type. Some of these methods described here override the methods in the super class. Other Category 1 methods not described here are inherited directly.","title":"Category 1 : Base Class Methods and Operator Overriding Methods"},{"location":"binint/#category-2-matrix-analysis-methods","text":"Other Methods are described in depth in here( Analysis Methods ) Method Description 1. isBinaryMatrix() This method checks if the Matrix in question is a BinaryMatrix any-more. Returns boolean value.","title":"Category 2 : Matrix Analysis Methods"},{"location":"binint/#category-3-intra-matrix-methods","text":"All Methods are described in depth in here( Intra-Matrix Methods )","title":"Category 3 : Intra-Matrix Methods"},{"location":"binint/#category-4-inter-matrix-methods","text":"All Methods are described in depth in here( Inter-Matrix Methods )","title":"Category 4: Inter-Matrix Methods"},{"location":"binint/#category-5-matrix-transformations","text":"All Methods are described in depth in here( Matrix Transformations )","title":"Category 5: Matrix Transformations"},{"location":"binint/#category-6-statistical-methods","text":"All Methods are described in depth in here( Statistical Methods )","title":"Category 6: Statistical Methods"},{"location":"binint/#category-7-supplementary-methods","text":"All Methods are described in depth in here( Supplementary Methods )","title":"Category 7: Supplementary Methods"},{"location":"binint/#category-8-binaryboolean-logic-methods","text":"These methods execute boolean logic on the binary matrices especially for 1-bit Emulated ones. Method Description 1. And() 2. Or() 3. Not() 4. Nand() 5. Nor() 6. Exor() 7. ExNor() 8. onesComplement() 9. twosComplement() 10. __AndS() 11. __Or() 12. __Not() 13. __Nand() 14. __Nor() 15. __EXNor() 16. __Exor() 17. __forward_one()","title":"Category 8 : Binary/Boolean Logic Methods"},{"location":"binint/#category-9-shift-methods","text":"These methods add binary shifts to the matrix as a whole. Method Description 1. logicalShift() 2. arithmeticShift() 3. circularShift() 4. popcount() 5. __listifyMatrix()","title":"Category 9 : Shift Methods"},{"location":"cat0/","text":"Category 0 : Matrix DataType pyrix.matrix.matrixData Class Reference This is the primary data object in pyrix/Matrix and pyrix/BinaryMatrix. MatrixData includes a ton of meta-Data which allows for enhanced Features,Performance and Computational Savings. A Dynamic Memoization Technique is also integrated in performance critical areas of the library ,however there are at times where the data memoized becomes outdated and hence needs to be recalculated to maintain Integrity and accuracy of calculations. Pyrix(Python Implementation) Balances these two aspects and has been implemented from scratch in python V3 only . With a vision of Python based web Applications in mind dataTypes used are JSON friendly. Once Again these properties have been listed along for a good reference. Property Description 1. nrow [int] Number of Rows 2. ncol [int] Number of Columns 3. dimensions [list] list format of nrow,ncol together 4. data [list] All the Matrix Values stored in nested-list format 5. invertibility [Boolean] returns True if matrix is invertible ,default-value=None 6. determinant [int] stores determinant value,default-value=None 7. singular [Boolean] returns False if matrix is invertible ,default-value=None 8. eigenvals [list] list of eigen values 9. eigenvects [list] list of eigen vectors 10. rank [int] stores the rank of the matrix 11. triangularity [int] returns 2 for upperT. ,1 for lowerT.,0 for No Triangularity 12. binaryMatrix [Boolean] returns True if binary matrix//reserved for binary matrix class 13. singularvalue [int/float] returns singular value,None By default 14. orthogonalMatrix [Boolean] returns True if matrix is orthogonal in nature 15. minor [list] contains minor values,By default None 16. listifieddata [list] contains all the data values in a flattened list 17. classType [str] defines the type of pyrix/matrix implementation(occours in inheriting classes) 18. symmetry [Boolean] True for symmetrical,None by default,False otherwise","title":"Matrix Datatype"},{"location":"cat0/#category-0-matrix-datatype","text":"","title":"Category 0 : Matrix DataType"},{"location":"cat0/#pyrixmatrixmatrixdata-class-reference","text":"This is the primary data object in pyrix/Matrix and pyrix/BinaryMatrix. MatrixData includes a ton of meta-Data which allows for enhanced Features,Performance and Computational Savings. A Dynamic Memoization Technique is also integrated in performance critical areas of the library ,however there are at times where the data memoized becomes outdated and hence needs to be recalculated to maintain Integrity and accuracy of calculations. Pyrix(Python Implementation) Balances these two aspects and has been implemented from scratch in python V3 only . With a vision of Python based web Applications in mind dataTypes used are JSON friendly. Once Again these properties have been listed along for a good reference. Property Description 1. nrow [int] Number of Rows 2. ncol [int] Number of Columns 3. dimensions [list] list format of nrow,ncol together 4. data [list] All the Matrix Values stored in nested-list format 5. invertibility [Boolean] returns True if matrix is invertible ,default-value=None 6. determinant [int] stores determinant value,default-value=None 7. singular [Boolean] returns False if matrix is invertible ,default-value=None 8. eigenvals [list] list of eigen values 9. eigenvects [list] list of eigen vectors 10. rank [int] stores the rank of the matrix 11. triangularity [int] returns 2 for upperT. ,1 for lowerT.,0 for No Triangularity 12. binaryMatrix [Boolean] returns True if binary matrix//reserved for binary matrix class 13. singularvalue [int/float] returns singular value,None By default 14. orthogonalMatrix [Boolean] returns True if matrix is orthogonal in nature 15. minor [list] contains minor values,By default None 16. listifieddata [list] contains all the data values in a flattened list 17. classType [str] defines the type of pyrix/matrix implementation(occours in inheriting classes) 18. symmetry [Boolean] True for symmetrical,None by default,False otherwise","title":"pyrix.matrix.matrixData Class Reference"},{"location":"cat1/","text":"Base Class Methods pyrix.matrix.Matrix.__init__() (Constructor) Abstract Code Description 1 2 3 4 class Matrix : :: def __init__ ( self , nrow = 1 , ncol = 1 , data = [ 1 ]): .... details parameters: nrow (int): number of rows for the matrix object ncol (int): number of columns for the matrix object data (nested-list): The data stored in the nested list structure Returns: return : A Matrix Object is returned Dimensions of the data should match the nrow,ncol values If this condition is not fulfilled the matrix raises an incompaitableTypeException pyrix.matrix.Matrix.__repr__() Abstract Code Description 1 2 3 4 class Matrix : :: def __repr__ ( self ): .... details Returns: return : A String is returned pyrix.matrix.Matrix.__str__() (str()) Abstract Code Description 1 2 3 4 class Matrix : :: def __str__ ( self ): .... details Every Time print method is called upon the matrix object this method is triggered. This method enables the Module to create a unique object print style. Returns: return : A String is returned pyrix.matrix.Matrix.__add__() ('+' operator) Abstract Code Description 1 2 3 4 class Matrix : :: def __add__ ( self , matrix2 ): .... details parameters: matrix2 (Matrix Object): the second operand matrix Returns: return : A new Matrix Object is returned Dimensions of both these matrices should match If this condition is not fulfilled the matrix raises an incompaitableTypeException pyrix.matrix.Matrix.__sub__() ('-' operator) Abstract Code Description 1 2 3 4 class Matrix : :: def __sub__ ( self , matrix2 ): .... details parameters: matrix2 (Matrix Object): the second operand matrix Returns: return : A new Matrix Object is returned Dimensions of both these matrices should match If this condition is not fulfilled the matrix raises an incompaitableTypeException pyrix.matrix.Matrix.__mul__() ('*' operator) Abstract Code Description 1 2 3 4 class Matrix : :: def __mul__ ( self , matrix2 ): .... details parameters: matrix2 (Matrix Object): the second operand matrix Returns: return : A new Matrix Object is returned The matrix1 . nrow should equal matrix2.ncol for multiplication operation If this condition is not fulfilled the matrix raises an incompaitableTypeException pyrix.matrix.Matrix.__truediv__() ('/' operator) Abstract Code Description 1 2 3 4 class Matrix : :: def __truediv__ ( self , matrix2 ): .... details parameters: matrix2 (Matrix Object): the second operand matrix Returns: return : An divisionErrorException is Raised pyrix.matrix.Matrix.__floordiv__() ('//' operator) Abstract Code Description 1 2 3 4 class Matrix : :: def __floordiv__ ( self , matrix2 ): .... details parameters: matrix2 (Matrix Object): the second operand matrix Returns: return : An divisionErrorException is Raised pyrix.matrix.Matrix.__pow__() ('**' operator) Abstract Code Description 1 2 3 4 class Matrix : :: def __pow__ ( self , times ): .... details parameters: times (int): The power value Returns: return : The same Matrix Object is returned The matrix should be a square Matrix by nature If this condition is not fulfilled the matrix raises an incompaitableTypeException self.isSquareMatrix() method is accessed to verify the nature Refer pyrix.matrix.Matrix.isSquareMatrix() pyrix.matrix.Matrix.__abs__() (abs()) Abstract Code Description 1 2 3 4 class Matrix : :: def __abs__ ( self ): .... details Returns: return : The determinant value is returned (float/int) The matrix should be a square Matrix by nature If this condition is not fulfilled the matrix raises an incompaitableTypeException self.isSquareMatrix() method is accessed to verify the nature Refer pyrix.matrix.Matrix.isSquareMatrix() self.determinantValue() method is accessed to return the determinant value Refer pyrix.matrix.Matrix.determinantValue() pyrix.matrix.Matrix.__mod__() ('%' operator) Abstract Code Description 1 2 3 4 class Matrix : :: def __mod__ ( self , matrix2 ): .... details parameters: matrix2 (Matrix Object): the second operand matrix Returns: return : An divisionErrorException is Raised pyrix.matrix.Matrix.__lshift__() ('>>' operator) Abstract Code Description 1 2 3 4 class Matrix : :: def __lshift__ ( self , number ): .... Returns: return : An bitWiseOnMatrix Exception is Raised pyrix.matrix.Matrix.__rshift__() ('<<' operator) Abstract Code Description 1 2 3 4 class Matrix : :: def __rshift__ ( self , number ): .... details Returns: return : An bitWiseOnMatrix Exception is Raised pyrix.matrix.Matrix.__and__() ('&' operator) Abstract Code Description 1 2 3 4 class Matrix : :: def __and__ ( self , Matrix2 ): .... details parameters: matrix2 (Matrix Object): the second operand matrix Returns: return : An bitWiseOnMatrix Exception is Raised pyrix.matrix.Matrix.__or__() ('|' operator) Abstract Code Description 1 2 3 4 class Matrix : :: def __or__ ( self , Matrix2 ): .... details parameters: matrix2 (Matrix Object): the second operand matrix Returns: return : An bitWiseOnMatrix Exception is Raised pyrix.matrix.Matrix.__xor__() ('^' operator) Abstract Code Description 1 2 3 4 class Matrix : :: def __xor__ ( self , Matrix2 ): .... details parameters: matrix2 (Matrix Object): the second operand matrix Returns: return : An bitWiseOnMatrix Exception is Raised pyrix.matrix.Matrix.__invert__() ('~' operator) Abstract Code Description 1 2 3 4 class Matrix : :: def __invert__ ( self ): .... details Returns: return : An bitWiseOnMatrix Exception is Raised pyrix.matrix.Matrix.__eq__() ('==' operator) Abstract Code Description 1 2 3 4 class Matrix : :: def __eq__ ( self , Matrix2 ): .... details parameters: matrix2 (Matrix Object): the second operand matrix Returns: return : A Boolean Value is returned based on the equality of indivisual values pyrix.matrix.Matrix.__trunc__() ( trunc() ) Description The trunc function behaves as a ceiling function for negative number and floor function for positive number. Abstract Code Description 1 2 3 4 class Matrix : :: def __trunc__ ( self ): .... details Returns: return : Returns a Matrix Object with Truncated Values. pyrix.matrix.Matrix.__floor__() ( floor() ) Description The floor function floors the value for a float numbers in the matrix. Abstract Code Description 1 2 3 4 class Matrix : :: def __floor__ ( self ): .... details Returns: return : Returns a Matrix Object with Floored Values. pyrix.matrix.Matrix.__ceil__() ( ceil() ) Description The ceil function ceils the value for a float numbers in the matrix. Abstract Code Description 1 2 3 4 class Matrix : :: def __ceil__ ( self ): .... details Returns: return : Returns a Matrix Object with Ceil limited Values.","title":"Base Class Methods"},{"location":"cat1/#base-class-methods","text":"","title":"Base Class Methods"},{"location":"cat1/#pyrixmatrixmatrix__init__-constructor","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __init__ ( self , nrow = 1 , ncol = 1 , data = [ 1 ]): .... details","title":"pyrix.matrix.Matrix.__init__() (Constructor)"},{"location":"cat1/#parameters","text":"nrow (int): number of rows for the matrix object ncol (int): number of columns for the matrix object data (nested-list): The data stored in the nested list structure","title":"parameters:"},{"location":"cat1/#returns","text":"return : A Matrix Object is returned Dimensions of the data should match the nrow,ncol values If this condition is not fulfilled the matrix raises an incompaitableTypeException","title":"Returns:"},{"location":"cat1/#pyrixmatrixmatrix__repr__","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __repr__ ( self ): .... details","title":"pyrix.matrix.Matrix.__repr__()"},{"location":"cat1/#returns_1","text":"return : A String is returned","title":"Returns:"},{"location":"cat1/#pyrixmatrixmatrix__str__-str","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __str__ ( self ): .... details Every Time print method is called upon the matrix object this method is triggered. This method enables the Module to create a unique object print style.","title":"pyrix.matrix.Matrix.__str__() (str())"},{"location":"cat1/#returns_2","text":"return : A String is returned","title":"Returns:"},{"location":"cat1/#pyrixmatrixmatrix__add__-operator","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __add__ ( self , matrix2 ): .... details","title":"pyrix.matrix.Matrix.__add__() ('+' operator)"},{"location":"cat1/#parameters_1","text":"matrix2 (Matrix Object): the second operand matrix","title":"parameters:"},{"location":"cat1/#returns_3","text":"return : A new Matrix Object is returned Dimensions of both these matrices should match If this condition is not fulfilled the matrix raises an incompaitableTypeException","title":"Returns:"},{"location":"cat1/#pyrixmatrixmatrix__sub__-operator","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __sub__ ( self , matrix2 ): .... details","title":"pyrix.matrix.Matrix.__sub__() ('-' operator)"},{"location":"cat1/#parameters_2","text":"matrix2 (Matrix Object): the second operand matrix","title":"parameters:"},{"location":"cat1/#returns_4","text":"return : A new Matrix Object is returned Dimensions of both these matrices should match If this condition is not fulfilled the matrix raises an incompaitableTypeException","title":"Returns:"},{"location":"cat1/#pyrixmatrixmatrix__mul__-operator","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __mul__ ( self , matrix2 ): .... details","title":"pyrix.matrix.Matrix.__mul__() ('*' operator)"},{"location":"cat1/#parameters_3","text":"matrix2 (Matrix Object): the second operand matrix","title":"parameters:"},{"location":"cat1/#returns_5","text":"return : A new Matrix Object is returned The matrix1 . nrow should equal matrix2.ncol for multiplication operation If this condition is not fulfilled the matrix raises an incompaitableTypeException","title":"Returns:"},{"location":"cat1/#pyrixmatrixmatrix__truediv__-operator","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __truediv__ ( self , matrix2 ): .... details","title":"pyrix.matrix.Matrix.__truediv__() ('/' operator)"},{"location":"cat1/#parameters_4","text":"matrix2 (Matrix Object): the second operand matrix","title":"parameters:"},{"location":"cat1/#returns_6","text":"return : An divisionErrorException is Raised","title":"Returns:"},{"location":"cat1/#pyrixmatrixmatrix__floordiv__-operator","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __floordiv__ ( self , matrix2 ): .... details","title":"pyrix.matrix.Matrix.__floordiv__() ('//' operator)"},{"location":"cat1/#parameters_5","text":"matrix2 (Matrix Object): the second operand matrix","title":"parameters:"},{"location":"cat1/#returns_7","text":"return : An divisionErrorException is Raised","title":"Returns:"},{"location":"cat1/#pyrixmatrixmatrix__pow__-operator","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __pow__ ( self , times ): .... details","title":"pyrix.matrix.Matrix.__pow__() ('**' operator)"},{"location":"cat1/#parameters_6","text":"times (int): The power value","title":"parameters:"},{"location":"cat1/#returns_8","text":"return : The same Matrix Object is returned The matrix should be a square Matrix by nature If this condition is not fulfilled the matrix raises an incompaitableTypeException self.isSquareMatrix() method is accessed to verify the nature Refer pyrix.matrix.Matrix.isSquareMatrix()","title":"Returns:"},{"location":"cat1/#pyrixmatrixmatrix__abs__-abs","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __abs__ ( self ): .... details","title":"pyrix.matrix.Matrix.__abs__() (abs())"},{"location":"cat1/#returns_9","text":"return : The determinant value is returned (float/int) The matrix should be a square Matrix by nature If this condition is not fulfilled the matrix raises an incompaitableTypeException self.isSquareMatrix() method is accessed to verify the nature Refer pyrix.matrix.Matrix.isSquareMatrix() self.determinantValue() method is accessed to return the determinant value Refer pyrix.matrix.Matrix.determinantValue()","title":"Returns:"},{"location":"cat1/#pyrixmatrixmatrix__mod__-operator","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __mod__ ( self , matrix2 ): .... details","title":"pyrix.matrix.Matrix.__mod__() ('%' operator)"},{"location":"cat1/#parameters_7","text":"matrix2 (Matrix Object): the second operand matrix","title":"parameters:"},{"location":"cat1/#returns_10","text":"return : An divisionErrorException is Raised","title":"Returns:"},{"location":"cat1/#pyrixmatrixmatrix__lshift__-operator","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __lshift__ ( self , number ): ....","title":"pyrix.matrix.Matrix.__lshift__() ('&gt;&gt;' operator)"},{"location":"cat1/#returns_11","text":"return : An bitWiseOnMatrix Exception is Raised","title":"Returns:"},{"location":"cat1/#pyrixmatrixmatrix__rshift__-operator","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __rshift__ ( self , number ): .... details","title":"pyrix.matrix.Matrix.__rshift__() ('&lt;&lt;' operator)"},{"location":"cat1/#returns_12","text":"return : An bitWiseOnMatrix Exception is Raised","title":"Returns:"},{"location":"cat1/#pyrixmatrixmatrix__and__-operator","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __and__ ( self , Matrix2 ): .... details","title":"pyrix.matrix.Matrix.__and__() ('&amp;' operator)"},{"location":"cat1/#parameters_8","text":"matrix2 (Matrix Object): the second operand matrix","title":"parameters:"},{"location":"cat1/#returns_13","text":"return : An bitWiseOnMatrix Exception is Raised","title":"Returns:"},{"location":"cat1/#pyrixmatrixmatrix__or__-operator","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __or__ ( self , Matrix2 ): .... details","title":"pyrix.matrix.Matrix.__or__() ('|' operator)"},{"location":"cat1/#parameters_9","text":"matrix2 (Matrix Object): the second operand matrix","title":"parameters:"},{"location":"cat1/#returns_14","text":"return : An bitWiseOnMatrix Exception is Raised","title":"Returns:"},{"location":"cat1/#pyrixmatrixmatrix__xor__-operator","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __xor__ ( self , Matrix2 ): .... details","title":"pyrix.matrix.Matrix.__xor__() ('^' operator)"},{"location":"cat1/#parameters_10","text":"matrix2 (Matrix Object): the second operand matrix","title":"parameters:"},{"location":"cat1/#returns_15","text":"return : An bitWiseOnMatrix Exception is Raised","title":"Returns:"},{"location":"cat1/#pyrixmatrixmatrix__invert__-operator","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __invert__ ( self ): .... details","title":"pyrix.matrix.Matrix.__invert__() ('~' operator)"},{"location":"cat1/#returns_16","text":"return : An bitWiseOnMatrix Exception is Raised","title":"Returns:"},{"location":"cat1/#pyrixmatrixmatrix__eq__-operator","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __eq__ ( self , Matrix2 ): .... details","title":"pyrix.matrix.Matrix.__eq__() ('==' operator)"},{"location":"cat1/#parameters_11","text":"matrix2 (Matrix Object): the second operand matrix","title":"parameters:"},{"location":"cat1/#returns_17","text":"return : A Boolean Value is returned based on the equality of indivisual values","title":"Returns:"},{"location":"cat1/#pyrixmatrixmatrix__trunc__-trunc","text":"Description The trunc function behaves as a ceiling function for negative number and floor function for positive number. Abstract Code Description 1 2 3 4 class Matrix : :: def __trunc__ ( self ): .... details","title":"pyrix.matrix.Matrix.__trunc__() (trunc())"},{"location":"cat1/#returns_18","text":"return : Returns a Matrix Object with Truncated Values.","title":"Returns:"},{"location":"cat1/#pyrixmatrixmatrix__floor__-floor","text":"Description The floor function floors the value for a float numbers in the matrix. Abstract Code Description 1 2 3 4 class Matrix : :: def __floor__ ( self ): .... details","title":"pyrix.matrix.Matrix.__floor__()     (floor())"},{"location":"cat1/#returns_19","text":"return : Returns a Matrix Object with Floored Values.","title":"Returns:"},{"location":"cat1/#pyrixmatrixmatrix__ceil__-ceil","text":"Description The ceil function ceils the value for a float numbers in the matrix. Abstract Code Description 1 2 3 4 class Matrix : :: def __ceil__ ( self ): .... details","title":"pyrix.matrix.Matrix.__ceil__()  (ceil())"},{"location":"cat1/#returns_20","text":"return : Returns a Matrix Object with Ceil limited Values.","title":"Returns:"},{"location":"cat2/","text":"Category 2 Methods pyrix.matrix.Matrix.equals() Abstract Code Description 1 2 def equals ( self , matrix2 ): .... details parameters: matrix2 (MatrixType) : The second matrix to be compared with Returns: return : A Boolean True or False is returned depending on the equality parameters considered Data,dimensions are the only factors of matrixdata compared for equality. pyrix.matrix.Matrix.isSquareMatrix() Abstract Code Description 1 2 def isSquareMatrix ( self ): .... details Returns: return : A Boolean True or False is returned depending on the dimensions parameters considered Dimension factors of matrixdata considered. pyrix.matrix.Matrix.isInvertible() Abstract Code Description 1 2 def isInvertible ( self ): .... details Returns: return : A Boolean True or False is returned depending on the singularity/determinant parameters considered singularity/invertibility or determinant factors of matrixdata compared for singularity check. pyrix.matrix.Matrix.isUpperTriangular() Abstract Code Description 1 2 3 4 class Matrix : :: def isUpperTriangular ( self ): .... details Returns: return : A Boolean True or False is returned depending on the triangular nature. pyrix.matrix.Matrix.isLowerTriangular() Abstract Code Description 1 2 3 4 class Matrix : :: def isLowerTriangular ( self ): .... details Returns: return : A Boolean True or False is returned depending on the triangular nature. pyrix.matrix.Matrix.isSymmetricMatrix() Abstract Code Description 1 2 3 4 class Matrix : :: def isSymmetricMatrix ( self ): .... details Returns: return : A Boolean True or False is returned depending on the symmetric nature. pyrix.matrix.Matrix.isOrthogonalMatrix() Abstract Code Description 1 2 3 4 class Matrix : :: def isOrthogonalMatrix ( self ): .... details Returns: return : A Boolean True or False is returned depending on the orthogonal nature. pyrix.matrix.Matrix.getRow() Abstract Code Description 1 2 3 4 class Matrix : :: def getRow ( self , index ): .... details parameters: index : this will provide the index of the row to be fetched. Returns: return : A new Matrix object is returned for the specified row element. pyrix.matrix.Matrix.getCol() Abstract Code Description 1 2 3 4 class Matrix : :: def getCol ( self , index ): .... details parameters: index : this will provide the index of the column to be fetched. Returns: return : A new Matrix object is returned for the specified column element. pyrix.matrix.Matrix.RoundOff() Abstract Code Description 1 2 3 4 class Matrix : :: def RoundOff ( self ): .... details parameters: extent : this will provide the round off digits. pyrix.matrix.Matrix.scaleMatrix() Abstract Code Description 1 2 3 4 class Matrix : :: def scaleMatrix ( self , scalar ): .... details parameters: scalar : the scaling factor for matrix. Returns: return : Self is returned. pyrix.matrix.Matrix.determinantValue() Abstract Code Description 1 2 3 4 class Matrix : :: def determinantValue ( self ): .... details Returns: return : Returns int/float data or determinant. pyrix.matrix.Matrix.__determinantHelper() Abstract Code Description 1 2 3 4 class Matrix : :: def __determinantHelper ( self , x , sum = 0 ): .... details parameters: x : the Matrix input for recursive use. sum : default=0, the sum of previous iteration of determinant process. Returns: return : sum value is returned. pyrix.matrix.Matrix.matrixRank() Abstract Code Description 1 2 3 4 class Matrix : :: def matrixRank ( self ): .... details Returns: return : returns rank value (int/float) type. pyrix.matrix.Matrix.matrixTrace() Abstract Code Description 1 2 3 4 class Matrix : :: def matrixTrace ( self ): .... details Returns: return : returns trace value (int) type. pyrix.matrix.Matrix.minorSpecific() Abstract Code Description 1 2 3 4 class Matrix : :: def minorSpecific ( self , row , column ): .... details parameters: row : the row index . column : the column index. Returns: return : The \"minor\" value of the specific element in matrix. pyrix.matrix.Matrix.getAllMinors() Abstract Code Description 1 2 3 4 class Matrix : :: def getAllMinors ( self ): .... details Returns: return : A matrixobject is returned with all the \"minor\" values. pyrix.matrix.Matrix.cofactorSpecific() Abstract Code Description 1 2 3 4 class Matrix : :: def cofactorSpecific ( self , row , column ): .... details parameters: row : the row index . column : the column index. Returns: return : The \"cofactor\" value of the specific element in matrix. pyrix.matrix.Matrix.getAllCofactors() Abstract Code Description 1 2 3 4 class Matrix : :: def getAllCofactors ( self ): .... details Returns: return : A matrixobject is returned with all the \"cofactor\" values. pyrix.matrix.Matrix.__minor() Abstract Code Description 1 2 3 4 class Matrix : :: def __minor ( self , matrixdata ): .... details parameters: matrixdata : The matrixdata in a nested list format. Returns: return : A nested list is returned with all the \"minor\" values. pyrix.matrix.Matrix.__cofactor() Abstract Code Description 1 2 3 4 class Matrix : :: def __cofactor ( self , minorlist ): .... details parameters: matrixdata : The matrixdata in a nested list format. Returns: return : A nested list is returned with all the \"cofactor\" values. pyrix.matrix.Matrix.__minor2x2() Abstract Code Description 1 2 3 4 class Matrix : :: def __minor2x2 ( self , matrixdata ): .... details parameters: matrixdata : The matrixdata in a nested list format for 2x2 matrix. Returns: return : A list is returned with all the \"minor\" values for 2x2 matrix. pyrix.matrix.Matrix.__matrixsplitter() Abstract Code Description 1 2 3 4 class Matrix : :: def __matrixsplitter ( self , matrixdata , exceptionrow , exceptioncol ): .... details parameters: matrixdata : The matrixdata in a nested list format. exceptionrow : The index of row to be excluded from the resultant matrix. exceptioncol : The index of col to be excluded from the resultant matrix. Returns: return : A nested list is returned after excluding the indexed row and columns.","title":"Matrix Analysis Methods"},{"location":"cat2/#category-2-methods","text":"","title":"Category 2 Methods"},{"location":"cat2/#pyrixmatrixmatrixequals","text":"Abstract Code Description 1 2 def equals ( self , matrix2 ): .... details","title":"pyrix.matrix.Matrix.equals()"},{"location":"cat2/#parameters","text":"matrix2 (MatrixType) : The second matrix to be compared with","title":"parameters:"},{"location":"cat2/#returns","text":"return : A Boolean True or False is returned depending on the equality parameters considered Data,dimensions are the only factors of matrixdata compared for equality.","title":"Returns:"},{"location":"cat2/#pyrixmatrixmatrixissquarematrix","text":"Abstract Code Description 1 2 def isSquareMatrix ( self ): .... details","title":"pyrix.matrix.Matrix.isSquareMatrix()"},{"location":"cat2/#returns_1","text":"return : A Boolean True or False is returned depending on the dimensions parameters considered Dimension factors of matrixdata considered.","title":"Returns:"},{"location":"cat2/#pyrixmatrixmatrixisinvertible","text":"Abstract Code Description 1 2 def isInvertible ( self ): .... details","title":"pyrix.matrix.Matrix.isInvertible()"},{"location":"cat2/#returns_2","text":"return : A Boolean True or False is returned depending on the singularity/determinant parameters considered singularity/invertibility or determinant factors of matrixdata compared for singularity check.","title":"Returns:"},{"location":"cat2/#pyrixmatrixmatrixisuppertriangular","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def isUpperTriangular ( self ): .... details","title":"pyrix.matrix.Matrix.isUpperTriangular()"},{"location":"cat2/#returns_3","text":"return : A Boolean True or False is returned depending on the triangular nature.","title":"Returns:"},{"location":"cat2/#pyrixmatrixmatrixislowertriangular","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def isLowerTriangular ( self ): .... details","title":"pyrix.matrix.Matrix.isLowerTriangular()"},{"location":"cat2/#returns_4","text":"return : A Boolean True or False is returned depending on the triangular nature.","title":"Returns:"},{"location":"cat2/#pyrixmatrixmatrixissymmetricmatrix","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def isSymmetricMatrix ( self ): .... details","title":"pyrix.matrix.Matrix.isSymmetricMatrix()"},{"location":"cat2/#returns_5","text":"return : A Boolean True or False is returned depending on the symmetric nature.","title":"Returns:"},{"location":"cat2/#pyrixmatrixmatrixisorthogonalmatrix","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def isOrthogonalMatrix ( self ): .... details","title":"pyrix.matrix.Matrix.isOrthogonalMatrix()"},{"location":"cat2/#returns_6","text":"return : A Boolean True or False is returned depending on the orthogonal nature.","title":"Returns:"},{"location":"cat2/#pyrixmatrixmatrixgetrow","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def getRow ( self , index ): .... details","title":"pyrix.matrix.Matrix.getRow()"},{"location":"cat2/#parameters_1","text":"index : this will provide the index of the row to be fetched.","title":"parameters:"},{"location":"cat2/#returns_7","text":"return : A new Matrix object is returned for the specified row element.","title":"Returns:"},{"location":"cat2/#pyrixmatrixmatrixgetcol","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def getCol ( self , index ): .... details","title":"pyrix.matrix.Matrix.getCol()"},{"location":"cat2/#parameters_2","text":"index : this will provide the index of the column to be fetched.","title":"parameters:"},{"location":"cat2/#returns_8","text":"return : A new Matrix object is returned for the specified column element.","title":"Returns:"},{"location":"cat2/#pyrixmatrixmatrixroundoff","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def RoundOff ( self ): .... details","title":"pyrix.matrix.Matrix.RoundOff()"},{"location":"cat2/#parameters_3","text":"extent : this will provide the round off digits.","title":"parameters:"},{"location":"cat2/#pyrixmatrixmatrixscalematrix","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def scaleMatrix ( self , scalar ): .... details","title":"pyrix.matrix.Matrix.scaleMatrix()"},{"location":"cat2/#parameters_4","text":"scalar : the scaling factor for matrix.","title":"parameters:"},{"location":"cat2/#returns_9","text":"return : Self is returned.","title":"Returns:"},{"location":"cat2/#pyrixmatrixmatrixdeterminantvalue","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def determinantValue ( self ): .... details","title":"pyrix.matrix.Matrix.determinantValue()"},{"location":"cat2/#returns_10","text":"return : Returns int/float data or determinant.","title":"Returns:"},{"location":"cat2/#pyrixmatrixmatrix__determinanthelper","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __determinantHelper ( self , x , sum = 0 ): .... details","title":"pyrix.matrix.Matrix.__determinantHelper()"},{"location":"cat2/#parameters_5","text":"x : the Matrix input for recursive use. sum : default=0, the sum of previous iteration of determinant process.","title":"parameters:"},{"location":"cat2/#returns_11","text":"return : sum value is returned.","title":"Returns:"},{"location":"cat2/#pyrixmatrixmatrixmatrixrank","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def matrixRank ( self ): .... details","title":"pyrix.matrix.Matrix.matrixRank()"},{"location":"cat2/#returns_12","text":"return : returns rank value (int/float) type.","title":"Returns:"},{"location":"cat2/#pyrixmatrixmatrixmatrixtrace","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def matrixTrace ( self ): .... details","title":"pyrix.matrix.Matrix.matrixTrace()"},{"location":"cat2/#returns_13","text":"return : returns trace value (int) type.","title":"Returns:"},{"location":"cat2/#pyrixmatrixmatrixminorspecific","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def minorSpecific ( self , row , column ): .... details","title":"pyrix.matrix.Matrix.minorSpecific()"},{"location":"cat2/#parameters_6","text":"row : the row index . column : the column index.","title":"parameters:"},{"location":"cat2/#returns_14","text":"return : The \"minor\" value of the specific element in matrix.","title":"Returns:"},{"location":"cat2/#pyrixmatrixmatrixgetallminors","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def getAllMinors ( self ): .... details","title":"pyrix.matrix.Matrix.getAllMinors()"},{"location":"cat2/#returns_15","text":"return : A matrixobject is returned with all the \"minor\" values.","title":"Returns:"},{"location":"cat2/#pyrixmatrixmatrixcofactorspecific","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def cofactorSpecific ( self , row , column ): .... details","title":"pyrix.matrix.Matrix.cofactorSpecific()"},{"location":"cat2/#parameters_7","text":"row : the row index . column : the column index.","title":"parameters:"},{"location":"cat2/#returns_16","text":"return : The \"cofactor\" value of the specific element in matrix.","title":"Returns:"},{"location":"cat2/#pyrixmatrixmatrixgetallcofactors","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def getAllCofactors ( self ): .... details","title":"pyrix.matrix.Matrix.getAllCofactors()"},{"location":"cat2/#returns_17","text":"return : A matrixobject is returned with all the \"cofactor\" values.","title":"Returns:"},{"location":"cat2/#pyrixmatrixmatrix__minor","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __minor ( self , matrixdata ): .... details","title":"pyrix.matrix.Matrix.__minor()"},{"location":"cat2/#parameters_8","text":"matrixdata : The matrixdata in a nested list format.","title":"parameters:"},{"location":"cat2/#returns_18","text":"return : A nested list is returned with all the \"minor\" values.","title":"Returns:"},{"location":"cat2/#pyrixmatrixmatrix__cofactor","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __cofactor ( self , minorlist ): .... details","title":"pyrix.matrix.Matrix.__cofactor()"},{"location":"cat2/#parameters_9","text":"matrixdata : The matrixdata in a nested list format.","title":"parameters:"},{"location":"cat2/#returns_19","text":"return : A nested list is returned with all the \"cofactor\" values.","title":"Returns:"},{"location":"cat2/#pyrixmatrixmatrix__minor2x2","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __minor2x2 ( self , matrixdata ): .... details","title":"pyrix.matrix.Matrix.__minor2x2()"},{"location":"cat2/#parameters_10","text":"matrixdata : The matrixdata in a nested list format for 2x2 matrix.","title":"parameters:"},{"location":"cat2/#returns_20","text":"return : A list is returned with all the \"minor\" values for 2x2 matrix.","title":"Returns:"},{"location":"cat2/#pyrixmatrixmatrix__matrixsplitter","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __matrixsplitter ( self , matrixdata , exceptionrow , exceptioncol ): .... details","title":"pyrix.matrix.Matrix.__matrixsplitter()"},{"location":"cat2/#parameters_11","text":"matrixdata : The matrixdata in a nested list format. exceptionrow : The index of row to be excluded from the resultant matrix. exceptioncol : The index of col to be excluded from the resultant matrix.","title":"parameters:"},{"location":"cat2/#returns_21","text":"return : A nested list is returned after excluding the indexed row and columns.","title":"Returns:"},{"location":"cat3/","text":"Intra-Matrix Methods pyrix.matrix.Matrix.addRow() Abstract Code Description 1 2 3 4 class Matrix : :: def addRow ( self , index1 , index2 ): .... details This method adds row at index2 of current matrix to the row at index1 of current matrix and store the resultant row at index1 position. parameters: index1 : This will locate the position of the row of the current matrix (int type). index2 : This will locate the position of the second row of the matrix (int type). pyrix.matrix.Matrix.subRow() Abstract Code Description 1 2 3 4 class Matrix : :: def subRow ( self , index1 , index2 ): .... details This method subtracts row at index2 of current matrix from the row at index1 of current matrix and store the resultant row at index1 position. parameters: index1 : This will locate the position of the row of the current matrix (int type). index2 : This will locate the position of the second row of the matrix (int type).","title":"Intra-Matrix Methods"},{"location":"cat3/#intra-matrix-methods","text":"","title":"Intra-Matrix Methods"},{"location":"cat3/#pyrixmatrixmatrixaddrow","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def addRow ( self , index1 , index2 ): .... details This method adds row at index2 of current matrix to the row at index1 of current matrix and store the resultant row at index1 position.","title":"pyrix.matrix.Matrix.addRow()"},{"location":"cat3/#parameters","text":"index1 : This will locate the position of the row of the current matrix (int type). index2 : This will locate the position of the second row of the matrix (int type).","title":"parameters:"},{"location":"cat3/#pyrixmatrixmatrixsubrow","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def subRow ( self , index1 , index2 ): .... details This method subtracts row at index2 of current matrix from the row at index1 of current matrix and store the resultant row at index1 position.","title":"pyrix.matrix.Matrix.subRow()"},{"location":"cat3/#parameters_1","text":"index1 : This will locate the position of the row of the current matrix (int type). index2 : This will locate the position of the second row of the matrix (int type).","title":"parameters:"},{"location":"cat4/","text":"Inter-Matrix Methods pyrix.matrix.Matrix.addRows() Abstract Code Description 1 2 3 4 class Matrix : :: def addRows ( self , index1 , m2 , index2 ): .... details This method adds row at index2 of matrix m2 to the row at index1 of current matrix and store the resultant row at index1 position of current matrix. parameters: index1 : This will locate the position of the row of the current matrix (int type). m2 : This is the second matrix object operand (Matrix type). index2 : This will locate the position of the row of the m2 matrix (int type). pyrix.matrix.Matrix.subRows() Abstract Code Description 1 2 3 4 class Matrix : :: def subRows ( self , index1 , m2 , index2 ): .... details This method subtracts row at index2 of matrix m2 from the row at index1 of current matrix and store the resultant row at index1 position of current matrix. parameters: index1 : This will locate the position of the row of the current matrix (int type). m2 : This is the second matrix object operand (Matrix type). index2 : This will locate the position of the row of the m2 matrix (int type).","title":"Inter-Matrix Methods"},{"location":"cat4/#inter-matrix-methods","text":"","title":"Inter-Matrix Methods"},{"location":"cat4/#pyrixmatrixmatrixaddrows","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def addRows ( self , index1 , m2 , index2 ): .... details This method adds row at index2 of matrix m2 to the row at index1 of current matrix and store the resultant row at index1 position of current matrix.","title":"pyrix.matrix.Matrix.addRows()"},{"location":"cat4/#parameters","text":"index1 : This will locate the position of the row of the current matrix (int type). m2 : This is the second matrix object operand (Matrix type). index2 : This will locate the position of the row of the m2 matrix (int type).","title":"parameters:"},{"location":"cat4/#pyrixmatrixmatrixsubrows","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def subRows ( self , index1 , m2 , index2 ): .... details This method subtracts row at index2 of matrix m2 from the row at index1 of current matrix and store the resultant row at index1 position of current matrix.","title":"pyrix.matrix.Matrix.subRows()"},{"location":"cat4/#parameters_1","text":"index1 : This will locate the position of the row of the current matrix (int type). m2 : This is the second matrix object operand (Matrix type). index2 : This will locate the position of the row of the m2 matrix (int type).","title":"parameters:"},{"location":"cat5/","text":"Matrix Transformation Methods pyrix.matrix.Matrix.invertMatrix() Abstract Code Description 1 2 3 4 class Matrix : :: def invertMatrix ( self ): .... details Returns: return : A matrix object with inversion transformation applied. pyrix.matrix.Matrix.__verify() Abstract Code Description 1 2 3 4 class Matrix : :: def __verify ( self , m2 ): .... details Parameters: m2 : The matrix to be multiplied with original matrix. Returns: return : A boolean true or false . pyrix.matrix.Matrix.rowEchleonTransform() Abstract Code Description 1 2 3 4 class Matrix : :: def rowEchleonTransform ( self ): .... details Returns: return : A matrix object with rowEchleon transformation applied. pyrix.matrix.Matrix.RrowEchleonTransform() Abstract Code Description 1 2 3 4 class Matrix : :: def RrowEchleonTransform ( self ): .... details Returns: return : A matrix object with reducedrowEchleon transformation applied. pyrix.matrix.Matrix.transposeTransform() Abstract Code Description 1 2 3 4 class Matrix : :: def transposeTransform ( self ): .... details Returns: return : A matrix object with transpose transformation applied. pyrix.matrix.Matrix.adjointTransform() Abstract Code Description 1 2 3 4 class Matrix : :: def adjointTransform ( self ): .... details Returns: return : A matrix object with adjoint transformation applied. pyrix.matrix.Matrix.__row_add() Abstract Code Description 1 2 3 4 class Matrix : :: def __row_add ( self , row_left , row_right ): .... details Parameters: left_row : The left_row (list type). right_row : The right_row (list type) . Returns: return : the final resultant row values (list type). pyrix.matrix.Matrix.__row_sub() Abstract Code Description 1 2 3 4 class Matrix : :: def __row_sub ( self , row_left , row_right ): .... details Parameters: left_row : The left_row (list type). right_row : The right_row (list type) . Returns: return : the final resultant row values (list type). pyrix.matrix.Matrix.__row_mult() Abstract Code Description 1 2 3 4 class Matrix : :: def __row_mult ( self , row , num ): .... details Parameters: row : The row which is to be worked on (list type). num : The value by which the row elements are to be multiplied (int/float type) . Returns: return : the final resultant row values (list type). pyrix.matrix.Matrix.__scalarDivideRow() Abstract Code Description 1 2 3 4 class Matrix : :: def __scalarDivideRow ( self , row , value ): .... details Parameters: row : The row which is to be worked on (list type). value : The value by which the row elements are to be divided (int/float type) . Returns: return : the final resultant row values (list type).","title":"Matrix Transformations"},{"location":"cat5/#matrix-transformation-methods","text":"","title":"Matrix Transformation Methods"},{"location":"cat5/#pyrixmatrixmatrixinvertmatrix","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def invertMatrix ( self ): .... details","title":"pyrix.matrix.Matrix.invertMatrix()"},{"location":"cat5/#returns","text":"return : A matrix object with inversion transformation applied.","title":"Returns:"},{"location":"cat5/#pyrixmatrixmatrix__verify","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __verify ( self , m2 ): .... details","title":"pyrix.matrix.Matrix.__verify()"},{"location":"cat5/#parameters","text":"m2 : The matrix to be multiplied with original matrix.","title":"Parameters:"},{"location":"cat5/#returns_1","text":"return : A boolean true or false .","title":"Returns:"},{"location":"cat5/#pyrixmatrixmatrixrowechleontransform","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def rowEchleonTransform ( self ): .... details","title":"pyrix.matrix.Matrix.rowEchleonTransform()"},{"location":"cat5/#returns_2","text":"return : A matrix object with rowEchleon transformation applied.","title":"Returns:"},{"location":"cat5/#pyrixmatrixmatrixrrowechleontransform","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def RrowEchleonTransform ( self ): .... details","title":"pyrix.matrix.Matrix.RrowEchleonTransform()"},{"location":"cat5/#returns_3","text":"return : A matrix object with reducedrowEchleon transformation applied.","title":"Returns:"},{"location":"cat5/#pyrixmatrixmatrixtransposetransform","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def transposeTransform ( self ): .... details","title":"pyrix.matrix.Matrix.transposeTransform()"},{"location":"cat5/#returns_4","text":"return : A matrix object with transpose transformation applied.","title":"Returns:"},{"location":"cat5/#pyrixmatrixmatrixadjointtransform","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def adjointTransform ( self ): .... details","title":"pyrix.matrix.Matrix.adjointTransform()"},{"location":"cat5/#returns_5","text":"return : A matrix object with adjoint transformation applied.","title":"Returns:"},{"location":"cat5/#pyrixmatrixmatrix__row_add","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __row_add ( self , row_left , row_right ): .... details","title":"pyrix.matrix.Matrix.__row_add()"},{"location":"cat5/#parameters_1","text":"left_row : The left_row (list type). right_row : The right_row (list type) .","title":"Parameters:"},{"location":"cat5/#returns_6","text":"return : the final resultant row values (list type).","title":"Returns:"},{"location":"cat5/#pyrixmatrixmatrix__row_sub","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __row_sub ( self , row_left , row_right ): .... details","title":"pyrix.matrix.Matrix.__row_sub()"},{"location":"cat5/#parameters_2","text":"left_row : The left_row (list type). right_row : The right_row (list type) .","title":"Parameters:"},{"location":"cat5/#returns_7","text":"return : the final resultant row values (list type).","title":"Returns:"},{"location":"cat5/#pyrixmatrixmatrix__row_mult","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __row_mult ( self , row , num ): .... details","title":"pyrix.matrix.Matrix.__row_mult()"},{"location":"cat5/#parameters_3","text":"row : The row which is to be worked on (list type). num : The value by which the row elements are to be multiplied (int/float type) .","title":"Parameters:"},{"location":"cat5/#returns_8","text":"return : the final resultant row values (list type).","title":"Returns:"},{"location":"cat5/#pyrixmatrixmatrix__scalardividerow","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def __scalarDivideRow ( self , row , value ): .... details","title":"pyrix.matrix.Matrix.__scalarDivideRow()"},{"location":"cat5/#parameters_4","text":"row : The row which is to be worked on (list type). value : The value by which the row elements are to be divided (int/float type) .","title":"Parameters:"},{"location":"cat5/#returns_9","text":"return : the final resultant row values (list type).","title":"Returns:"},{"location":"cat6/","text":"Statistical Methods pyrix.matrix.Matrix.globalMean() Abstract Code Description 1 2 3 4 class Matrix : :: def globalMean ( self ): .... details This method finds the mean value in the whole matrix Returns: return : the mean value (int/float type). pyrix.matrix.Matrix.globalMedian() Abstract Code Description 1 2 3 4 class Matrix : :: def globalMedian ( self ): .... details This method finds the median value in the whole matrix Returns: return : the median value (int/float type). pyrix.matrix.Matrix.globalMode() Abstract Code Description 1 2 3 4 class Matrix : :: def globalMode ( self ): .... details This method finds the mode value in the whole matrix Returns: return : the mode value (int/float type). pyrix.matrix.Matrix.localRowMean() Abstract Code Description 1 2 3 4 class Matrix : :: def localRowMean ( self , rowindex ): .... details This method finds the mean value in the indexed row of the matrix Parameters: rowindex : the index of the row to be selected. Returns: return : the mean value of the row (int/float type). pyrix.matrix.Matrix.localRowMedian() Abstract Code Description 1 2 3 4 class Matrix : :: def localRowMedian ( self , rowindex ): .... details This method finds the median value in the indexed row of the matrix Parameters: rowindex : the index of the row to be selected. Returns: return : the median value of the row (int/float type). pyrix.matrix.Matrix.localRowMode() Abstract Code Description 1 2 3 4 class Matrix : :: def localRowMode ( self , rowindex ): .... details This method finds the mode value in the indexed row of the matrix Parameters: rowindex : the index of the row to be selected. Returns: return : the mode value of the row (int/float type). pyrix.matrix.Matrix.localColumnMean() Abstract Code Description 1 2 3 4 class Matrix : :: def localColumnMean ( self , colindex ): .... details This method finds the mean value in the indexed column of the matrix Parameters: colindex : the index of the column to be selected. Returns: return : the mean value of the column (int/float type). pyrix.matrix.Matrix.localColumnMedian() Abstract Code Description 1 2 3 4 class Matrix : :: def localColumnMedian ( self , colindex ): .... details This method finds the median value in the indexed column of the matrix Parameters: colindex : the index of the column to be selected. Returns: return : the median value of the column (int/float type). pyrix.matrix.Matrix.localColumnMode() Abstract Code Description 1 2 3 4 class Matrix : :: def localColumnMode ( self , colindex ): .... details This method finds the mode value in the indexed column of the matrix Parameters: colindex : the index of the column to be selected. Returns: return : the mode value of the column (int/float type).","title":"Statistical Methods"},{"location":"cat6/#statistical-methods","text":"","title":"Statistical Methods"},{"location":"cat6/#pyrixmatrixmatrixglobalmean","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def globalMean ( self ): .... details This method finds the mean value in the whole matrix","title":"pyrix.matrix.Matrix.globalMean()"},{"location":"cat6/#returns","text":"return : the mean value (int/float type).","title":"Returns:"},{"location":"cat6/#pyrixmatrixmatrixglobalmedian","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def globalMedian ( self ): .... details This method finds the median value in the whole matrix","title":"pyrix.matrix.Matrix.globalMedian()"},{"location":"cat6/#returns_1","text":"return : the median value (int/float type).","title":"Returns:"},{"location":"cat6/#pyrixmatrixmatrixglobalmode","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def globalMode ( self ): .... details This method finds the mode value in the whole matrix","title":"pyrix.matrix.Matrix.globalMode()"},{"location":"cat6/#returns_2","text":"return : the mode value (int/float type).","title":"Returns:"},{"location":"cat6/#pyrixmatrixmatrixlocalrowmean","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def localRowMean ( self , rowindex ): .... details This method finds the mean value in the indexed row of the matrix","title":"pyrix.matrix.Matrix.localRowMean()"},{"location":"cat6/#parameters","text":"rowindex : the index of the row to be selected.","title":"Parameters:"},{"location":"cat6/#returns_3","text":"return : the mean value of the row (int/float type).","title":"Returns:"},{"location":"cat6/#pyrixmatrixmatrixlocalrowmedian","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def localRowMedian ( self , rowindex ): .... details This method finds the median value in the indexed row of the matrix","title":"pyrix.matrix.Matrix.localRowMedian()"},{"location":"cat6/#parameters_1","text":"rowindex : the index of the row to be selected.","title":"Parameters:"},{"location":"cat6/#returns_4","text":"return : the median value of the row (int/float type).","title":"Returns:"},{"location":"cat6/#pyrixmatrixmatrixlocalrowmode","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def localRowMode ( self , rowindex ): .... details This method finds the mode value in the indexed row of the matrix","title":"pyrix.matrix.Matrix.localRowMode()"},{"location":"cat6/#parameters_2","text":"rowindex : the index of the row to be selected.","title":"Parameters:"},{"location":"cat6/#returns_5","text":"return : the mode value of the row (int/float type).","title":"Returns:"},{"location":"cat6/#pyrixmatrixmatrixlocalcolumnmean","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def localColumnMean ( self , colindex ): .... details This method finds the mean value in the indexed column of the matrix","title":"pyrix.matrix.Matrix.localColumnMean()"},{"location":"cat6/#parameters_3","text":"colindex : the index of the column to be selected.","title":"Parameters:"},{"location":"cat6/#returns_6","text":"return : the mean value of the column (int/float type).","title":"Returns:"},{"location":"cat6/#pyrixmatrixmatrixlocalcolumnmedian","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def localColumnMedian ( self , colindex ): .... details This method finds the median value in the indexed column of the matrix","title":"pyrix.matrix.Matrix.localColumnMedian()"},{"location":"cat6/#parameters_4","text":"colindex : the index of the column to be selected.","title":"Parameters:"},{"location":"cat6/#returns_7","text":"return : the median value of the column (int/float type).","title":"Returns:"},{"location":"cat6/#pyrixmatrixmatrixlocalcolumnmode","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def localColumnMode ( self , colindex ): .... details This method finds the mode value in the indexed column of the matrix","title":"pyrix.matrix.Matrix.localColumnMode()"},{"location":"cat6/#parameters_5","text":"colindex : the index of the column to be selected.","title":"Parameters:"},{"location":"cat6/#returns_8","text":"return : the mode value of the column (int/float type).","title":"Returns:"},{"location":"cat7/","text":"Supplementary methods pyrix.matrix.Matrix.vectorMultiplication() Abstract Code Description 1 2 3 4 class Matrix : :: def vectorMultiplication ( self , v1 ): .... details This method multiplies the vector data list with the matrix and returns a resultant matrix. parameters: v1 : This is the input vector data list ( list ). Returns: return : resultant matrix object.","title":"Supplementary Methods"},{"location":"cat7/#supplementary-methods","text":"","title":"Supplementary methods"},{"location":"cat7/#pyrixmatrixmatrixvectormultiplication","text":"Abstract Code Description 1 2 3 4 class Matrix : :: def vectorMultiplication ( self , v1 ): .... details This method multiplies the vector data list with the matrix and returns a resultant matrix.","title":"pyrix.matrix.Matrix.vectorMultiplication()"},{"location":"cat7/#parameters","text":"v1 : This is the input vector data list ( list ).","title":"parameters:"},{"location":"cat7/#returns","text":"return : resultant matrix object.","title":"Returns:"},{"location":"cat8/","text":"","title":"Binary/Boolean Logic Methods"},{"location":"cat9/","text":"","title":"Logical Shift Methods"},{"location":"catb1/","text":"","title":"Base Class Methods"},{"location":"cate1/","text":"","title":"Cate1"},{"location":"catv0/","text":"","title":"category 0"},{"location":"documentation/","text":"pyrix.matrix package Reference Categorization Of Methods 1 2 3 4 5 6 7 8 9 10 pyrix <-[package] | ----matrix <-[sub-package] | ----zeroMatrix() <-[function] ----unitMatrix() <-[function] ----identityMatrix() <-[function] ----randomMatrix() <-[function] ----matrixData <-[class] ----Matrix <-[class] pyrix.matrix.matrixData Class Reference Category 0: Matrix DataType The Core Mechanism which is used to store the Matrix Object Data. Having Applied Elements of Dynamic Programming , It is quite effective in making decisions when it comes to calculating certain values in a cost effective way and on the other hand maintains a Character Profile of the Matrix . All The Matrix Data is stored here which allows for implementing Dynamic Programming Principles such as Memoization: Property Description 1. nrow [int] Number of Rows 2. ncol [int] Number of Columns 3. dimensions [list] list format of nrow,ncol together 4. data [list] All the Matrix Values stored in nested-list format 5. invertibility [Boolean] returns True if matrix is invertible ,default-value=None 6. determinant [int] stores determinant value,default-value=None 7. singular [Boolean] returns False if matrix is invertible ,default-value=None 8. eigenvals [list] list of eigen values 9. eigenvects [list] list of eigen vectors 10. rank [int] stores the rank of the matrix 11. triangularity [int] returns 2 for upperT. ,1 for lowerT.,0 for No Triangularity 12. binaryMatrix [Boolean] returns True if binary matrix//reserved for binary matrix class 13. singularvalue [int/float] returns singular value,None By default 14. orthogonalMatrix [Boolean] returns True if matrix is orthogonal in nature 15. minor [list] contains minor values,By default None 16. listifieddata [list] contains all the data values in a flattened list 17. classType [str] defines the type of pyrix/matrix implementation(occours in inheriting classes) 18. symmetry [Boolean] True for symmetrical,None by default,False otherwise pyrix.matrix.Matrix Class Reference Category 1: Base Class Methods and Operator Overriding Methods These Methods are extensions for adding operator support to custom Matrix object type. Method Description 1. __init__() Initializer constructor method 2. __repr__() Describes/represents the object and returns sensible/expected values. 3. __str__() String value of the Object. 4. __add__() Addition of two matrices [ operator override ]. 5. __sub__() Subtraction of two matrices [ operator override ]. 6. __mul__() Multiplication of two matrices [ operator override ]. 7. __truediv__() Dummy Method to prevent operator failure [ operator override ]. 8. __floordiv__() Dummy Method to prevent operator failure [ operator override ]. 9. __pow__() Raises a matrix to the specified power. 10. __abs__() Returns the absolute or determinant value of the matrix. 11. __mod__() Dummy Method to prevent operator misuse raises divisionErrorException exception [ operator override ]. 12. __lshift__() Dummy Method to prevent operator misuse raises bitWiseOnMatrix exception [ operator override ]. 13. __rshift__() Dummy Method to prevent operator misuse raises bitWiseOnMatrix exception [ operator override ]. 14. __and__() Dummy Method to prevent operator misuse raises bitWiseOnMatrix exception [ operator override ]. 15. __or__() Dummy Method to prevent operator misuse raises bitWiseOnMatrix exception [ operator override ]. 16. __xor__() Dummy Method to prevent operator misuse raises bitWiseOnMatrix exception [ operator override ]. 17. __invert__() Dummy Method to prevent operator misuse raises bitWiseOnMatrix exception [ operator override ]. 18. __eq__() returns boolean values based on matrix equality. 20. __ceil__() 19. __floor__() 21. __trunc__() Category 2 : Matrix Analysis Methods These methods are useful for analyzing charactaristicts of the matrix for some interpretation and helps saving computation costs in certain cases. Method Description 1. equals Checks for equality of the two matrices based on dimensions and the data inside. Returns a Boolean Value. 2. isSquareMatrix Checks if the Matrix is a square Matrix or not. A square matrix is a matrix with equal number of rows and cols. Returns a Boolean value. 3. isInvertible Checks if the Matrix is an Invertible Matrix or not .An Invertible matrix is a matrix with a non zero determinant .Returns a Boolean value. 4. isUpperTriangular This method determines whether a Matrix is a Upper Triangular matrix or not . Returns a Boolean value 5. isLowerTriangular This method determines whether a Matrix is a Lower Triangular matrix or not . Returns a Boolean value 6. isSymmetricMatrix 7. isOrthogonalMatrix 8. getRow Selects a Row of the matrix of specified index .Returns a list of the values. 9. getCol Selects a Column of the matrix of specified index .Returns a list(or nested list) of the values. 10. RoundOff Rounds off the Value of the data in the matrix object to the given extent .Returns NoneType and should not be assigned to a variable. 11. scaleMatrix Scales the Value of the data in the matrix object by the scalar value .Returns NoneType and should not be assigned to a variable. 12. determinantValue Determines the determinant value of the matrix object .Returns int or float depending on the outcome. 13. __determinantHelper This Method specifically helps with recursive implementation of determinant algorithm. 14. matrixRank Calculates the Rank of the matrix object .Returns integer value of rank. 15. matrixTrace The trace of a square matrix is defined to be the sum of elements on the main diagonal of a Matrix. Returns a Int/float value. 16. minorSpecific Finds a specific minor value for a certain position.Returns a Int/Float Value. 17. getAllMinors Finds all the minor values of the matrix object. Returns a new Matrix Object of minors. 18. cofactorSpecific Finds a specific cofactor Value of a certain position. Returns a Int/Float Value. 19. getAllCofactors Finds all the cofactor values of the matrix object. Returns a new Matrix Object of cofactors. 20. __minor Finds minor values (Private method) . Returns a nested list of minors 21. __cofactor Finds cofactor values (Private method). Returns a nested list of cofactors. 22. __minor2x2 Finds minor values for 2x2 matrices (Private method). Returns a nested list. 23. __matrixsplitter Category 3 : Intra-Matrix Methods These Methods deal with Row and Column operations on the same matrix. Method Description 1. addRow Adds row values of one matrix to same matrix .Returns NoneType and should not be assigned to a variable. 2. subRow Subtracts row values of one matrix to same matrix .Returns NoneType and should not be assigned to a variable Category 4: Inter-Matrix Methods These Methods deal with Row and Column operations on different matrices Method Description 1. addRows Adds row values of one matrix to another matrix Returns NoneType and should not be assigned to a variable. 2. subRows Subtracts row values of one matrix to another matrix .Returns NoneType and should not be assigned to a variable. Category 5: Matrix Transformations These Methods apply to matrices where they are transformed in some way or the other Method Description 1. invertMatrix Creates an Inverse Matrix of the given matrix .Returns a Matrix object. 2. __verify This method verifies a inverse of the matrix by multiplying it with the original input matrix to get identity matrix. 3. rowEchleonTransform 4. RrowEchleonTransform 5. transposeTransform Transpose of the original matrix is created. Returns a Matrix Object. 6. adjointTransform 7. __row__add An internal method for adding row values.[ \"legacy method\" ] 8. __row__sub An internal method for subtracting row values.[ \"legacy method\" ] 9. __row__mult An internal method for scaling a specific row with a value.[ \"legacy method\" ] 10. __scalarDivideRow An internal method for scaling down a row.[ \"legacy method\" ] Category 6: Statistical Methods These Methods perform statistical operations over the matrix Method Description 1. globalMean Finds the mean value of all data points in the matrix. 2. globalMedian Finds the median value of all data points in the matrix. 3. globalMode Finds the Mode value of all data points in the matrix. 4. localRowMean Finds the mean value of all data points in the matrix for a specified row. 5. localRowMedian Finds the median value of all data points in the matrix for a specified row. 6. localRowMode Finds the Mode value of all data points in the matrix for a specified row. 7. localColumnMean Finds the mean value of all data points in the matrix for a specified column. 8. localColumnMedian Finds the median value of all data points in the matrix for a specified column. 9. localColumnMode Finds the Mode value of all data points in the matrix for a specified column. Category 7: Supplementary Methods A few of the Extras Methods Method Description 1. vectorMultiplication Vector multiplication with a compatible matrix object.[ Experimental method ] Quick Initialization functions and Utility Functions Util Methods A few ways to create a new matrix object Method Description 1. zeroMatrix Create a zero matrix of the given dimensions. Returns a Matrix Object. 2. unitMatrix Create a unit matrix of the given dimensions. Returns a Matrix Object . 3. identityMatrix Create a identity matrix of the given dimensions Works for square Matrices . Retuns a Matrix Object. 4. randomMatrix Aids in creating Pseudo-Random matrix of an estimated size and dimensions with options to configure paramaters. 5. copy Creates a DEEP(HARD) copy of the Matrix object. Returns a Matrix Object","title":"Introduction"},{"location":"documentation/#pyrixmatrix-package-reference","text":"","title":"pyrix.matrix package Reference"},{"location":"documentation/#categorization-of-methods","text":"1 2 3 4 5 6 7 8 9 10 pyrix <-[package] | ----matrix <-[sub-package] | ----zeroMatrix() <-[function] ----unitMatrix() <-[function] ----identityMatrix() <-[function] ----randomMatrix() <-[function] ----matrixData <-[class] ----Matrix <-[class]","title":"Categorization Of Methods"},{"location":"documentation/#pyrixmatrixmatrixdata-class-reference","text":"","title":"pyrix.matrix.matrixData Class Reference"},{"location":"documentation/#category-0-matrix-datatype","text":"The Core Mechanism which is used to store the Matrix Object Data. Having Applied Elements of Dynamic Programming , It is quite effective in making decisions when it comes to calculating certain values in a cost effective way and on the other hand maintains a Character Profile of the Matrix . All The Matrix Data is stored here which allows for implementing Dynamic Programming Principles such as Memoization: Property Description 1. nrow [int] Number of Rows 2. ncol [int] Number of Columns 3. dimensions [list] list format of nrow,ncol together 4. data [list] All the Matrix Values stored in nested-list format 5. invertibility [Boolean] returns True if matrix is invertible ,default-value=None 6. determinant [int] stores determinant value,default-value=None 7. singular [Boolean] returns False if matrix is invertible ,default-value=None 8. eigenvals [list] list of eigen values 9. eigenvects [list] list of eigen vectors 10. rank [int] stores the rank of the matrix 11. triangularity [int] returns 2 for upperT. ,1 for lowerT.,0 for No Triangularity 12. binaryMatrix [Boolean] returns True if binary matrix//reserved for binary matrix class 13. singularvalue [int/float] returns singular value,None By default 14. orthogonalMatrix [Boolean] returns True if matrix is orthogonal in nature 15. minor [list] contains minor values,By default None 16. listifieddata [list] contains all the data values in a flattened list 17. classType [str] defines the type of pyrix/matrix implementation(occours in inheriting classes) 18. symmetry [Boolean] True for symmetrical,None by default,False otherwise","title":"Category 0: Matrix DataType"},{"location":"documentation/#pyrixmatrixmatrix-class-reference","text":"","title":"pyrix.matrix.Matrix Class Reference"},{"location":"documentation/#category-1-base-class-methods-and-operator-overriding-methods","text":"These Methods are extensions for adding operator support to custom Matrix object type. Method Description 1. __init__() Initializer constructor method 2. __repr__() Describes/represents the object and returns sensible/expected values. 3. __str__() String value of the Object. 4. __add__() Addition of two matrices [ operator override ]. 5. __sub__() Subtraction of two matrices [ operator override ]. 6. __mul__() Multiplication of two matrices [ operator override ]. 7. __truediv__() Dummy Method to prevent operator failure [ operator override ]. 8. __floordiv__() Dummy Method to prevent operator failure [ operator override ]. 9. __pow__() Raises a matrix to the specified power. 10. __abs__() Returns the absolute or determinant value of the matrix. 11. __mod__() Dummy Method to prevent operator misuse raises divisionErrorException exception [ operator override ]. 12. __lshift__() Dummy Method to prevent operator misuse raises bitWiseOnMatrix exception [ operator override ]. 13. __rshift__() Dummy Method to prevent operator misuse raises bitWiseOnMatrix exception [ operator override ]. 14. __and__() Dummy Method to prevent operator misuse raises bitWiseOnMatrix exception [ operator override ]. 15. __or__() Dummy Method to prevent operator misuse raises bitWiseOnMatrix exception [ operator override ]. 16. __xor__() Dummy Method to prevent operator misuse raises bitWiseOnMatrix exception [ operator override ]. 17. __invert__() Dummy Method to prevent operator misuse raises bitWiseOnMatrix exception [ operator override ]. 18. __eq__() returns boolean values based on matrix equality. 20. __ceil__() 19. __floor__() 21. __trunc__()","title":"Category 1: Base Class Methods and Operator Overriding Methods"},{"location":"documentation/#category-2-matrix-analysis-methods","text":"These methods are useful for analyzing charactaristicts of the matrix for some interpretation and helps saving computation costs in certain cases. Method Description 1. equals Checks for equality of the two matrices based on dimensions and the data inside. Returns a Boolean Value. 2. isSquareMatrix Checks if the Matrix is a square Matrix or not. A square matrix is a matrix with equal number of rows and cols. Returns a Boolean value. 3. isInvertible Checks if the Matrix is an Invertible Matrix or not .An Invertible matrix is a matrix with a non zero determinant .Returns a Boolean value. 4. isUpperTriangular This method determines whether a Matrix is a Upper Triangular matrix or not . Returns a Boolean value 5. isLowerTriangular This method determines whether a Matrix is a Lower Triangular matrix or not . Returns a Boolean value 6. isSymmetricMatrix 7. isOrthogonalMatrix 8. getRow Selects a Row of the matrix of specified index .Returns a list of the values. 9. getCol Selects a Column of the matrix of specified index .Returns a list(or nested list) of the values. 10. RoundOff Rounds off the Value of the data in the matrix object to the given extent .Returns NoneType and should not be assigned to a variable. 11. scaleMatrix Scales the Value of the data in the matrix object by the scalar value .Returns NoneType and should not be assigned to a variable. 12. determinantValue Determines the determinant value of the matrix object .Returns int or float depending on the outcome. 13. __determinantHelper This Method specifically helps with recursive implementation of determinant algorithm. 14. matrixRank Calculates the Rank of the matrix object .Returns integer value of rank. 15. matrixTrace The trace of a square matrix is defined to be the sum of elements on the main diagonal of a Matrix. Returns a Int/float value. 16. minorSpecific Finds a specific minor value for a certain position.Returns a Int/Float Value. 17. getAllMinors Finds all the minor values of the matrix object. Returns a new Matrix Object of minors. 18. cofactorSpecific Finds a specific cofactor Value of a certain position. Returns a Int/Float Value. 19. getAllCofactors Finds all the cofactor values of the matrix object. Returns a new Matrix Object of cofactors. 20. __minor Finds minor values (Private method) . Returns a nested list of minors 21. __cofactor Finds cofactor values (Private method). Returns a nested list of cofactors. 22. __minor2x2 Finds minor values for 2x2 matrices (Private method). Returns a nested list. 23. __matrixsplitter","title":"Category 2 : Matrix Analysis Methods"},{"location":"documentation/#category-3-intra-matrix-methods","text":"These Methods deal with Row and Column operations on the same matrix. Method Description 1. addRow Adds row values of one matrix to same matrix .Returns NoneType and should not be assigned to a variable. 2. subRow Subtracts row values of one matrix to same matrix .Returns NoneType and should not be assigned to a variable","title":"Category 3 : Intra-Matrix Methods"},{"location":"documentation/#category-4-inter-matrix-methods","text":"These Methods deal with Row and Column operations on different matrices Method Description 1. addRows Adds row values of one matrix to another matrix Returns NoneType and should not be assigned to a variable. 2. subRows Subtracts row values of one matrix to another matrix .Returns NoneType and should not be assigned to a variable.","title":"Category 4: Inter-Matrix Methods"},{"location":"documentation/#category-5-matrix-transformations","text":"These Methods apply to matrices where they are transformed in some way or the other Method Description 1. invertMatrix Creates an Inverse Matrix of the given matrix .Returns a Matrix object. 2. __verify This method verifies a inverse of the matrix by multiplying it with the original input matrix to get identity matrix. 3. rowEchleonTransform 4. RrowEchleonTransform 5. transposeTransform Transpose of the original matrix is created. Returns a Matrix Object. 6. adjointTransform 7. __row__add An internal method for adding row values.[ \"legacy method\" ] 8. __row__sub An internal method for subtracting row values.[ \"legacy method\" ] 9. __row__mult An internal method for scaling a specific row with a value.[ \"legacy method\" ] 10. __scalarDivideRow An internal method for scaling down a row.[ \"legacy method\" ]","title":"Category 5: Matrix Transformations"},{"location":"documentation/#category-6-statistical-methods","text":"These Methods perform statistical operations over the matrix Method Description 1. globalMean Finds the mean value of all data points in the matrix. 2. globalMedian Finds the median value of all data points in the matrix. 3. globalMode Finds the Mode value of all data points in the matrix. 4. localRowMean Finds the mean value of all data points in the matrix for a specified row. 5. localRowMedian Finds the median value of all data points in the matrix for a specified row. 6. localRowMode Finds the Mode value of all data points in the matrix for a specified row. 7. localColumnMean Finds the mean value of all data points in the matrix for a specified column. 8. localColumnMedian Finds the median value of all data points in the matrix for a specified column. 9. localColumnMode Finds the Mode value of all data points in the matrix for a specified column.","title":"Category 6: Statistical Methods"},{"location":"documentation/#category-7-supplementary-methods","text":"A few of the Extras Methods Method Description 1. vectorMultiplication Vector multiplication with a compatible matrix object.[ Experimental method ]","title":"Category 7: Supplementary Methods"},{"location":"documentation/#quick-initialization-functions-and-utility-functions","text":"","title":"Quick Initialization functions and Utility Functions"},{"location":"documentation/#util-methods","text":"A few ways to create a new matrix object Method Description 1. zeroMatrix Create a zero matrix of the given dimensions. Returns a Matrix Object. 2. unitMatrix Create a unit matrix of the given dimensions. Returns a Matrix Object . 3. identityMatrix Create a identity matrix of the given dimensions Works for square Matrices . Retuns a Matrix Object. 4. randomMatrix Aids in creating Pseudo-Random matrix of an estimated size and dimensions with options to configure paramaters. 5. copy Creates a DEEP(HARD) copy of the Matrix object. Returns a Matrix Object","title":"Util Methods"},{"location":"exceptint/","text":"","title":"introduction"},{"location":"faq/","text":"Frequently Asked Questions Why Open Source ? In the journey of developing pyrix, I opened up myself to the idea of 'Open Source' and never looked back. I enjoy the perks of having open source project and give life to this project; rather than keep it to myself. Why Use Pyrix ? Pyrix is developed with a different mindset and approach to matrices. Some Features in favour are : Zero External Dependencies Pure Python-3 Implementation Utilize Full advantage of Python Lists A Better Data Object with Memoization Good Documentation and DocString Support Why is Pyrix Slower than Other Libraries ? That is indeed true, Pyrix slows down on larger scale use cases when compared to other libraries from these issues: Python is Interpreted and unlike C/FORTRAN code used in other libraries Pyrix takes it slow. PYPY does help though. No Custom C Data Object/ Arrays Means we are back to good old python lists. Multi-Threading is not supported and Multi-Processing is not implemented in Pyrix yet.","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"Why Open Source ? In the journey of developing pyrix, I opened up myself to the idea of 'Open Source' and never looked back. I enjoy the perks of having open source project and give life to this project; rather than keep it to myself. Why Use Pyrix ? Pyrix is developed with a different mindset and approach to matrices. Some Features in favour are : Zero External Dependencies Pure Python-3 Implementation Utilize Full advantage of Python Lists A Better Data Object with Memoization Good Documentation and DocString Support Why is Pyrix Slower than Other Libraries ? That is indeed true, Pyrix slows down on larger scale use cases when compared to other libraries from these issues: Python is Interpreted and unlike C/FORTRAN code used in other libraries Pyrix takes it slow. PYPY does help though. No Custom C Data Object/ Arrays Means we are back to good old python lists. Multi-Threading is not supported and Multi-Processing is not implemented in Pyrix yet.","title":"Frequently Asked Questions"},{"location":"gen/","text":"General Introduction Pyrix Module/Package has been split up into several Sub-Modules\\Packages . Hence you will find that these are scattered into logically seperated units, This way it is easier to know where you are going with the imports and which functionality you need is clearly described hence reduction in unwanted imports. 1. Matrix Module This is the heart and soul of Pyrix Module. The main class which defines the base matrix and all the methods which serve as the basic functionalities which later come handy. 2. BinaryMatrix Module Somewhat unique to pyrix and matrices in general , this sub module is a Unique, Explicit way of manipulating matrices with binary numbers. Some of the abstract concepts of binary logic, bitwise logic has been well crafted into this sub module and it aims to provide easier and more fun approach to work with Binary matrices. 3. CharactarMatrix Module The latest addition to pyrix is CharactarMatrix sub-module. It is a new experiment and I hope to improve it in future versions. 4. Vector Module Vector and Matrix go hand in hand in many fields and subjects . Hence a Matrix representation of Vectors is a Undeniably powerfull tool with those aspects. Some Vector specific methods have also been added to make it more convinient to use . 5. Exceptions Guide Quote \"At the end of the day the user has to correct its mistakes , so the best a Software can do is highlight the issue and describe it.\" Exceptions come handy in these situiations and make pyrix more comprehensive and fail proof . User also gets some exception handling goodness and the end products are well refined.","title":"General Introduction"},{"location":"gen/#general-introduction","text":"Pyrix Module/Package has been split up into several Sub-Modules\\Packages . Hence you will find that these are scattered into logically seperated units, This way it is easier to know where you are going with the imports and which functionality you need is clearly described hence reduction in unwanted imports.","title":"General Introduction"},{"location":"gen/#1-matrix-module","text":"This is the heart and soul of Pyrix Module. The main class which defines the base matrix and all the methods which serve as the basic functionalities which later come handy.","title":"1. Matrix Module"},{"location":"gen/#2-binarymatrix-module","text":"Somewhat unique to pyrix and matrices in general , this sub module is a Unique, Explicit way of manipulating matrices with binary numbers. Some of the abstract concepts of binary logic, bitwise logic has been well crafted into this sub module and it aims to provide easier and more fun approach to work with Binary matrices.","title":"2. BinaryMatrix Module"},{"location":"gen/#3-charactarmatrix-module","text":"The latest addition to pyrix is CharactarMatrix sub-module. It is a new experiment and I hope to improve it in future versions.","title":"3. CharactarMatrix Module"},{"location":"gen/#4-vector-module","text":"Vector and Matrix go hand in hand in many fields and subjects . Hence a Matrix representation of Vectors is a Undeniably powerfull tool with those aspects. Some Vector specific methods have also been added to make it more convinient to use .","title":"4. Vector Module"},{"location":"gen/#5-exceptions-guide","text":"Quote \"At the end of the day the user has to correct its mistakes , so the best a Software can do is highlight the issue and describe it.\" Exceptions come handy in these situiations and make pyrix more comprehensive and fail proof . User also gets some exception handling goodness and the end products are well refined.","title":"5. Exceptions Guide"},{"location":"geninfo/","text":"","title":"introduction"},{"location":"getpyrix/","text":"Getting Pyrix Using pip Clone Git Repository Download from PYPI From this page","title":"Getting Pyrix"},{"location":"getpyrix/#getting-pyrix","text":"","title":"Getting Pyrix"},{"location":"getpyrix/#using-pip","text":"","title":"Using pip"},{"location":"getpyrix/#clone-git-repository","text":"","title":"Clone Git Repository"},{"location":"getpyrix/#download-from-pypi","text":"","title":"Download from PYPI"},{"location":"getpyrix/#from-this-page","text":"","title":"From this page"},{"location":"meqint/","text":"Equational Methods These Methods add capability to manipulate matrix equations Method Description 1. ACRTransform 2. ALUTransform 3. AQRTransform 4. LUDecomposition 5. eigenTerms 6. singularValue 7. augmentedMatrix 8. orthogonaleigenVectors 9. jordanGuassElimination","title":"Meqint"},{"location":"meqint/#equational-methods","text":"These Methods add capability to manipulate matrix equations Method Description 1. ACRTransform 2. ALUTransform 3. AQRTransform 4. LUDecomposition 5. eigenTerms 6. singularValue 7. augmentedMatrix 8. orthogonaleigenVectors 9. jordanGuassElimination","title":"Equational Methods"},{"location":"progress/","text":"Documentation progress 50% SiteMap Home Release History Documentation General Introduction Matrix SubModule Introduction Matrix DataType Base Class Methods Matrix Analysis Methods Intra Matrix Methods Inter Matrix Methods Matrix Transformations Statistical Methods Supplementary Methods Binary Matrix SubModule Introduction Base class Methods Binary/Boolean Logic Methods Logical Shift Methods Charactar Matrix SubModule Introduction Character Specific Methods Modified Methods Base Method Changes Vector Submodule Introduction Base Class Methods Vector Analysis methods Vector Transformations Util Submodule Introduction Functions Exceptions Guide","title":"Documentation progress"},{"location":"progress/#documentation-progress","text":"50%","title":"Documentation progress"},{"location":"progress/#sitemap","text":"Home Release History Documentation General Introduction Matrix SubModule Introduction Matrix DataType Base Class Methods Matrix Analysis Methods Intra Matrix Methods Inter Matrix Methods Matrix Transformations Statistical Methods Supplementary Methods Binary Matrix SubModule Introduction Base class Methods Binary/Boolean Logic Methods Logical Shift Methods Charactar Matrix SubModule Introduction Character Specific Methods Modified Methods Base Method Changes Vector Submodule Introduction Base Class Methods Vector Analysis methods Vector Transformations Util Submodule Introduction Functions Exceptions Guide","title":"SiteMap"},{"location":"vint/","text":"","title":"introduction"}]}