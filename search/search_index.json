{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pyrix Well often times in the process of evolution we come across new stuff. Pyrix is one of them . Pyrix is a Clean-Room implemented Module/Library which allows for improved , More intuitive Operations with Matrices and some of its related Fields such as vectors and linear Algebra. Pyrix is a complete clean implementation in python Language with no external dependencies. Why Pyrix? As computaional Mathematics has evolved we have reached a stage where traditional pen/paper mathematics is becoming more of a tradition . For example in the recent courses at MIT for Linear Algebra-18.06 Most lectures are focused on explaining abstract ideas and methods . For the most Part Computers have proven to be a lot faster to do large computations and with a precise,accurate solution. I pitch Pyrix to be a Well implemented,Fast Performing Library to enable other students to learn Linear Algebra and Matrix Mathematics alongside. Being a student it's often a struggle to adopt to computational mathematics. Some courses leave students at an abstract view of concepts and its always upto the student to explore further. With pyrix being Open-Source One can easily view the source code , understand how the matrix operations are performed within the computer . Pyrix has been written with clean Documentation and Comments as it is intended to be viewed Multiple times.I encourage Students and anyone who is interested in matrix and linear algebra to look under the hood of pyrix and get an essence of implementation. For others who want to use all the features of pyrix in their programs , just install and import the package in your code. Documentation is thoroughly provided here. Getting Started with Pyrix For Python3 enviornment one can install the package with pip $ pip install pyrix * some operating systems see pip for python2 and pip3 for python3 ,in that case $ pip3 install pyrix Download Source code Download","title":"Home"},{"location":"#pyrix","text":"Well often times in the process of evolution we come across new stuff. Pyrix is one of them . Pyrix is a Clean-Room implemented Module/Library which allows for improved , More intuitive Operations with Matrices and some of its related Fields such as vectors and linear Algebra. Pyrix is a complete clean implementation in python Language with no external dependencies.","title":"Pyrix"},{"location":"#why-pyrix","text":"As computaional Mathematics has evolved we have reached a stage where traditional pen/paper mathematics is becoming more of a tradition . For example in the recent courses at MIT for Linear Algebra-18.06 Most lectures are focused on explaining abstract ideas and methods . For the most Part Computers have proven to be a lot faster to do large computations and with a precise,accurate solution. I pitch Pyrix to be a Well implemented,Fast Performing Library to enable other students to learn Linear Algebra and Matrix Mathematics alongside. Being a student it's often a struggle to adopt to computational mathematics. Some courses leave students at an abstract view of concepts and its always upto the student to explore further. With pyrix being Open-Source One can easily view the source code , understand how the matrix operations are performed within the computer . Pyrix has been written with clean Documentation and Comments as it is intended to be viewed Multiple times.I encourage Students and anyone who is interested in matrix and linear algebra to look under the hood of pyrix and get an essence of implementation. For others who want to use all the features of pyrix in their programs , just install and import the package in your code. Documentation is thoroughly provided here.","title":"Why Pyrix?"},{"location":"#getting-started-with-pyrix","text":"For Python3 enviornment one can install the package with pip $ pip install pyrix * some operating systems see pip for python2 and pip3 for python3 ,in that case $ pip3 install pyrix","title":"Getting Started with Pyrix"},{"location":"#download-source-code","text":"Download","title":"Download Source code"},{"location":"Download/","text":"Download Pyrix One can download pyrix directly from PYPI or pip: 1. PYPI : https://pypi.org/project/pyrix/ 2. Using pip : pip install pyrix Download Releases V0.7.17rc1(pre-release) Release Date : 28-09-2020 Tag Link : v0.7.17rc1 Change-Log : Bug Fixes Removed Unused/half baked features Character Matrix Feature added CI builds for different Architecture Automated Unit Tests and Code Coverage Enhanced Performance in some aspects as compared to previous version Assets : pyrix-0.7.17rc1-py3-none-any.whl pyrix-0.7.17rc1.tar.gz Source code(zip) Source code(tar.gz) V0.7.17rc0(pre-release) Release Date : 29-08-2020 Tag Link : v0.7.17rc0 Change-Log : Stability Update Fixed Circular Imports Minor Fixes New Features : Character Matrix(Upcoming/Currently in development) Assets : pyrix-0.7.17rc0-py3-none-any.whl pyrix-0.7.17rc0.tar.gz Source code(zip) Source code(tar.gz)","title":"Download Pyrix"},{"location":"Download/#download-pyrix","text":"One can download pyrix directly from PYPI or pip: 1. PYPI : https://pypi.org/project/pyrix/ 2. Using pip : pip install pyrix","title":"Download Pyrix"},{"location":"Download/#download-releases","text":"V0.7.17rc1(pre-release)","title":"Download Releases"},{"location":"Download/#release-date-28-09-2020","text":"","title":"Release Date : 28-09-2020"},{"location":"Download/#tag-link-v0717rc1","text":"","title":"Tag Link : v0.7.17rc1"},{"location":"Download/#change-log","text":"Bug Fixes Removed Unused/half baked features Character Matrix Feature added CI builds for different Architecture Automated Unit Tests and Code Coverage Enhanced Performance in some aspects as compared to previous version","title":"Change-Log :"},{"location":"Download/#assets","text":"pyrix-0.7.17rc1-py3-none-any.whl pyrix-0.7.17rc1.tar.gz Source code(zip) Source code(tar.gz) V0.7.17rc0(pre-release)","title":"Assets :"},{"location":"Download/#release-date-29-08-2020","text":"","title":"Release Date : 29-08-2020"},{"location":"Download/#tag-link-v0717rc0","text":"","title":"Tag Link : v0.7.17rc0"},{"location":"Download/#change-log_1","text":"Stability Update Fixed Circular Imports Minor Fixes","title":"Change-Log :"},{"location":"Download/#new-features","text":"Character Matrix(Upcoming/Currently in development)","title":"New Features :"},{"location":"Download/#assets_1","text":"pyrix-0.7.17rc0-py3-none-any.whl pyrix-0.7.17rc0.tar.gz Source code(zip) Source code(tar.gz)","title":"Assets :"},{"location":"Release/","text":"Release History V0.7.17rc1 Release Date : 28-09-2020 Tag Link : v0.7.17rc1 Change-Log : Bug Fixes Removed Unused/half baked features Character Matrix Feature added CI builds for different Architecture Automated Unit Tests and Code Coverage Enhanced Performance in some aspects as compared to previous version Assets : pyrix-0.7.17rc1-py3-none-any.whl pyrix-0.7.17rc1.tar.gz Source code(zip) Source code(tar.gz) V0.7.17rc0 Release Date : 29-08-2020 Tag Link : v0.7.17rc0 Change-Log : Stability Update Fixed Circular Imports Minor Fixes New Features : Character Matrix(Upcoming/Currently in development) Assets : pyrix-0.7.17rc0-py3-none-any.whl pyrix-0.7.17rc0.tar.gz Source code(zip) Source code(tar.gz)","title":"Releases"},{"location":"Release/#release-history","text":"","title":"Release History"},{"location":"Release/#v0717rc1","text":"","title":"V0.7.17rc1"},{"location":"Release/#release-date-28-09-2020","text":"","title":"Release Date : 28-09-2020"},{"location":"Release/#tag-link-v0717rc1","text":"","title":"Tag Link : v0.7.17rc1"},{"location":"Release/#change-log","text":"Bug Fixes Removed Unused/half baked features Character Matrix Feature added CI builds for different Architecture Automated Unit Tests and Code Coverage Enhanced Performance in some aspects as compared to previous version","title":"Change-Log :"},{"location":"Release/#assets","text":"pyrix-0.7.17rc1-py3-none-any.whl pyrix-0.7.17rc1.tar.gz Source code(zip) Source code(tar.gz)","title":"Assets :"},{"location":"Release/#v0717rc0","text":"","title":"V0.7.17rc0"},{"location":"Release/#release-date-29-08-2020","text":"","title":"Release Date : 29-08-2020"},{"location":"Release/#tag-link-v0717rc0","text":"","title":"Tag Link : v0.7.17rc0"},{"location":"Release/#change-log_1","text":"Stability Update Fixed Circular Imports Minor Fixes","title":"Change-Log :"},{"location":"Release/#new-features","text":"Character Matrix(Upcoming/Currently in development)","title":"New Features :"},{"location":"Release/#assets_1","text":"pyrix-0.7.17rc0-py3-none-any.whl pyrix-0.7.17rc0.tar.gz Source code(zip) Source code(tar.gz)","title":"Assets :"},{"location":"about/","text":"","title":"About"},{"location":"binint/","text":"Introduction Inheritance from Matrix Class Binary Matrix is a special subset of matrices in general , which reflets in Pyrix as well by Inheriting all of the methods used in the traditional Matrix class . Instead or reinventing the wheel i have extended the Matrix class as a superclass of BinaryMatrix class. Some Methods which are Unique to Binary Matrices are implemented in the sub class hence defining the changes. So instead of discussing all methods of Matrix class again, i will discuss what are the changes and new exclusive Methods again Categorized in a similar fashion. Apparently some methods when applied to binary matrices will completely change its form and with that transformation or function the binaryMatrix will no longer remain a Binary Matrix . For Example using scaleMatrix() method will scale a binaryMatrix but since it has the potential to change the definition of binary matrix where the \"1s\" values would be scaled by a certain scalar and hence will be automatically TypeCasted into Traditional Matrix Object. Another way to maintain integrity is through typechecking as a precautionary step in Critical methods and function calls to keep a track on changes and retaining the binary Nature of these matrices intact. Category 0 : BinaryMatrix DataType Category 1 : Base Class Methods and Operator Overriding Methods These Methods are extensions for adding operator support to custom BinaryMatrix object type. Some of these methods described here override the methods in the super class. Other Category 1 methods not described here are inherited directly. Category 2 : Matrix Analysis Methods Other Methods are described in depth in here( Analysis Methods ) Category 3 : Intra-Matrix Methods All Methods are described in depth in here( Intra-Matrix Methods ) Category 4: Inter-Matrix Methods All Methods are described in depth in here( Inter-Matrix Methods ) Category 5: Matrix Transformations All Methods are described in depth in here( Matrix Transformations ) Category 6: Statistical Methods All Methods are described in depth in here( Statistical Methods ) Category 7: Supplementary Methods All Methods are described in depth in here( Supplementary Methods ) Category 8 : Binary/Boolean Logic Methods Category 9 : Logical Shift Methods","title":"introduction"},{"location":"binint/#introduction","text":"","title":"Introduction"},{"location":"binint/#inheritance-from-matrix-class","text":"Binary Matrix is a special subset of matrices in general , which reflets in Pyrix as well by Inheriting all of the methods used in the traditional Matrix class . Instead or reinventing the wheel i have extended the Matrix class as a superclass of BinaryMatrix class. Some Methods which are Unique to Binary Matrices are implemented in the sub class hence defining the changes. So instead of discussing all methods of Matrix class again, i will discuss what are the changes and new exclusive Methods again Categorized in a similar fashion. Apparently some methods when applied to binary matrices will completely change its form and with that transformation or function the binaryMatrix will no longer remain a Binary Matrix . For Example using scaleMatrix() method will scale a binaryMatrix but since it has the potential to change the definition of binary matrix where the \"1s\" values would be scaled by a certain scalar and hence will be automatically TypeCasted into Traditional Matrix Object. Another way to maintain integrity is through typechecking as a precautionary step in Critical methods and function calls to keep a track on changes and retaining the binary Nature of these matrices intact.","title":"Inheritance from Matrix Class"},{"location":"binint/#category-0-binarymatrix-datatype","text":"","title":"Category 0 : BinaryMatrix DataType"},{"location":"binint/#category-1-base-class-methods-and-operator-overriding-methods","text":"These Methods are extensions for adding operator support to custom BinaryMatrix object type. Some of these methods described here override the methods in the super class. Other Category 1 methods not described here are inherited directly.","title":"Category 1 : Base Class Methods and Operator Overriding Methods"},{"location":"binint/#category-2-matrix-analysis-methods","text":"Other Methods are described in depth in here( Analysis Methods )","title":"Category 2 : Matrix Analysis Methods"},{"location":"binint/#category-3-intra-matrix-methods","text":"All Methods are described in depth in here( Intra-Matrix Methods )","title":"Category 3 : Intra-Matrix Methods"},{"location":"binint/#category-4-inter-matrix-methods","text":"All Methods are described in depth in here( Inter-Matrix Methods )","title":"Category 4: Inter-Matrix Methods"},{"location":"binint/#category-5-matrix-transformations","text":"All Methods are described in depth in here( Matrix Transformations )","title":"Category 5: Matrix Transformations"},{"location":"binint/#category-6-statistical-methods","text":"All Methods are described in depth in here( Statistical Methods )","title":"Category 6: Statistical Methods"},{"location":"binint/#category-7-supplementary-methods","text":"All Methods are described in depth in here( Supplementary Methods )","title":"Category 7: Supplementary Methods"},{"location":"binint/#category-8-binaryboolean-logic-methods","text":"","title":"Category 8 : Binary/Boolean Logic Methods"},{"location":"binint/#category-9-logical-shift-methods","text":"","title":"Category 9 : Logical Shift Methods"},{"location":"cat0/","text":"Category 0 : Matrix DataType This is the primary data object in pyrix/Matrix and pyrix/BinaryMatrix. MatrixData includes a ton of meta-Data which allows for enhanced Features,Performance and Computational Savings. A Dynamic Memoization Technique is also integrated in performance critical areas of the library ,however there are at times where the data memoized becomes outdated and hence needs to be recalculated to maintain Integrity and accuracy of calculations. Pyrix(Python Implementation) Balances these two aspects and has been implemented from scratch in python V3 only . With a vision of Python based web Applications in mind dataTypes used are JSON friendly. Once Again these properties have been listed along for a good reference. Property Description 1. nrow [int] Number of Rows 2. ncol [int] Number of Columns 3. dimensions [list] list format of nrow,ncol together 4. data [list] All the Matrix Values stored in nested-list format 5. invertibility [Boolean] returns True if matrix is invertible ,default-value=None 6. determinant [int] stores determinant value,default-value=None 7. singular [Boolean] returns False if matrix is invertible ,default-value=None 8. eigenvals [list] list of eigen values 9. eigenvects [list] list of eigen vectors 10. rank [int] stores the rank of the matrix 11. triangularity [int] returns 2 for upperT. ,1 for lowerT.,0 for No Triangularity 12. binaryMatrix [Boolean] returns True if binary matrix//reserved for binary matrix class 13. singularvalue [int/float] returns singular value,None By default 14. orthogonalMatrix [Boolean] returns True if matrix is orthogonal in nature 15. minor [list] contains minor values,By default None 16. listifieddata [list] contains all the data values in a flattened list 17. classType [str] defines the type of pyrix/matrix implementation(occours in inheriting classes) 18. symmetry [Boolean] True for symmetrical,None by default,False otherwise","title":"Matrix Datatype"},{"location":"cat0/#category-0-matrix-datatype","text":"This is the primary data object in pyrix/Matrix and pyrix/BinaryMatrix. MatrixData includes a ton of meta-Data which allows for enhanced Features,Performance and Computational Savings. A Dynamic Memoization Technique is also integrated in performance critical areas of the library ,however there are at times where the data memoized becomes outdated and hence needs to be recalculated to maintain Integrity and accuracy of calculations. Pyrix(Python Implementation) Balances these two aspects and has been implemented from scratch in python V3 only . With a vision of Python based web Applications in mind dataTypes used are JSON friendly. Once Again these properties have been listed along for a good reference. Property Description 1. nrow [int] Number of Rows 2. ncol [int] Number of Columns 3. dimensions [list] list format of nrow,ncol together 4. data [list] All the Matrix Values stored in nested-list format 5. invertibility [Boolean] returns True if matrix is invertible ,default-value=None 6. determinant [int] stores determinant value,default-value=None 7. singular [Boolean] returns False if matrix is invertible ,default-value=None 8. eigenvals [list] list of eigen values 9. eigenvects [list] list of eigen vectors 10. rank [int] stores the rank of the matrix 11. triangularity [int] returns 2 for upperT. ,1 for lowerT.,0 for No Triangularity 12. binaryMatrix [Boolean] returns True if binary matrix//reserved for binary matrix class 13. singularvalue [int/float] returns singular value,None By default 14. orthogonalMatrix [Boolean] returns True if matrix is orthogonal in nature 15. minor [list] contains minor values,By default None 16. listifieddata [list] contains all the data values in a flattened list 17. classType [str] defines the type of pyrix/matrix implementation(occours in inheriting classes) 18. symmetry [Boolean] True for symmetrical,None by default,False otherwise","title":"Category 0 : Matrix DataType"},{"location":"cat1/","text":"Category 1 Methods 1. __init__ (Constructor) method syntax def __init__ ( self , nrow = 1 , ncol = 1 , data = [ 1 ]): .... details parameters: nrow (int): number of rows for the matrix object ncol (int): number of columns for the matrix object data (nested-list): The data stored in the nested list structure output: out : A Matrix Object is returned Dimensions of the data should match the nrow,ncol values If this condition is not fulfilled the matrix raises an incompaitableTypeException 2. __repr__ method syntax def __repr__ ( self ): .... details output: out : A String is returned 3. __str__ (String) method syntax def __str__ ( self ): .... details Every Time print method is called upon the matrix object this method is triggered. This method enables the Module to create a unique object print style. output: out : A String is returned 4. __add__ ('+') operator method syntax def __add__ ( self , matrix2 ): .... details parameters: matrix2 (Matrix Object): the second operand matrix output: out : A new Matrix Object is returned Dimensions of both these matrices should match If this condition is not fulfilled the matrix raises an incompaitableTypeException 5. __sub__ ('-') operator method syntax def __sub__ ( self , matrix2 ): .... details parameters: matrix2 (Matrix Object): the second operand matrix output: out : A new Matrix Object is returned Dimensions of both these matrices should match If this condition is not fulfilled the matrix raises an incompaitableTypeException 6. __mul__ ('*') operator method syntax def __mul__ ( self , matrix2 ): .... details parameters: matrix2 (Matrix Object): the second operand matrix output: out : A new Matrix Object is returned The matrix1 . nrow should equal matrix2.ncol for multiplication operation If this condition is not fulfilled the matrix raises an incompaitableTypeException 7. __truediv__ ('/') operator method syntax def __truediv__ ( self , matrix2 ): .... details parameters: matrix2 (Matrix Object): the second operand matrix output: out : An divisionErrorException is Raised 8. __floordiv__ ('//') operator method syntax def __floordiv__ ( self , matrix2 ): .... details parameters: matrix2 (Matrix Object): the second operand matrix output: out : An divisionErrorException is Raised 9. __pow__ ('**') operator method syntax def __pow__ ( self , times ): .... details parameters: times (int): The power value output: out : The same Matrix Object is returned The matrix should be a square Matrix by nature If this condition is not fulfilled the matrix raises an incompaitableTypeException self.isSquareMatrix() method is accessed to verify the nature Refer Matrix Module -> isSquareMatrix() 10. __abs__ (abs()) Builtin method syntax def __abs__ ( self ): .... details output: out : The determinant value is returned (float/int) The matrix should be a square Matrix by nature If this condition is not fulfilled the matrix raises an incompaitableTypeException self.isSquareMatrix() method is accessed to verify the nature Refer Matrix Module -> isSquareMatrix() self.determinantValue() method is accessed to return the determinant value Refer Matrix Module -> determinantValue() 11. __mod__ ('%') operator method syntax def __mod__ ( self , matrix2 ): .... details parameters: matrix2 (Matrix Object): the second operand matrix output: out : An divisionErrorException is Raised 12. __lshift__ ('>>') operator Method syntax def __lshift__ ( self , number ): .... output: out : An bitWiseOnMatrix Exception is Raised 13. __rshift__ ('<<') operator Method syntax def __rshift__ ( self , number ): .... details output: out : An bitWiseOnMatrix Exception is Raised 14. __and__ ('&') operator Method syntax def __and__ ( self , Matrix2 ): .... details parameters: matrix2 (Matrix Object): the second operand matrix output: out : An bitWiseOnMatrix Exception is Raised 15. __or__ ('|') operator Method syntax def __or__ ( self , Matrix2 ): .... details parameters: matrix2 (Matrix Object): the second operand matrix output: out : An bitWiseOnMatrix Exception is Raised 16. __xor__ ('^') operator Method syntax def __xor__ ( self , Matrix2 ): .... details parameters: matrix2 (Matrix Object): the second operand matrix output: out : An bitWiseOnMatrix Exception is Raised 17. __invert__ ('!') operator Method syntax def __invert__ ( self ): .... details output: out : An bitWiseOnMatrix Exception is Raised 18. __eq__ ('==') operator Method syntax def __eq__ ( self , Matrix2 ): .... details parameters: matrix2 (Matrix Object): the second operand matrix output: out : A Boolean Value is returned based on the equality of indivisual values 19. __trunc__ ( trunc() ) Builtin Method Description The trunc function behaves as a ceiling function for negative number and floor function for positive number. syntax def __trunc__ ( self ): .... details output: out : Returns a Matrix Object with Truncated Values. 20. __floor__ ( floor() ) Builtin Method Description The floor function floors the value for a float numbers in the matrix. syntax def __floor__ ( self ): .... details output: out : Returns a Matrix Object with Floored Values. 21. __ceil__ ( ceil() ) Builtin Method Description The ceil function ceils the value for a float numbers in the matrix. syntax def __ceil__ ( self ): .... details output: out : Returns a Matrix Object with Ceilated Values.","title":"Base Class Methods"},{"location":"cat1/#category-1-methods","text":"","title":"Category 1 Methods"},{"location":"cat1/#1-__init__-constructor-method","text":"syntax def __init__ ( self , nrow = 1 , ncol = 1 , data = [ 1 ]): .... details","title":"1. __init__ (Constructor) method"},{"location":"cat1/#parameters","text":"nrow (int): number of rows for the matrix object ncol (int): number of columns for the matrix object data (nested-list): The data stored in the nested list structure","title":"parameters:"},{"location":"cat1/#output","text":"out : A Matrix Object is returned Dimensions of the data should match the nrow,ncol values If this condition is not fulfilled the matrix raises an incompaitableTypeException","title":"output:"},{"location":"cat1/#2-__repr__-method","text":"syntax def __repr__ ( self ): .... details","title":"2. __repr__  method"},{"location":"cat1/#output_1","text":"out : A String is returned","title":"output:"},{"location":"cat1/#3-__str__-string-method","text":"syntax def __str__ ( self ): .... details Every Time print method is called upon the matrix object this method is triggered. This method enables the Module to create a unique object print style.","title":"3. __str__ (String) method"},{"location":"cat1/#output_2","text":"out : A String is returned","title":"output:"},{"location":"cat1/#4-__add__-operator-method","text":"syntax def __add__ ( self , matrix2 ): .... details","title":"4. __add__ ('+') operator method"},{"location":"cat1/#parameters_1","text":"matrix2 (Matrix Object): the second operand matrix","title":"parameters:"},{"location":"cat1/#output_3","text":"out : A new Matrix Object is returned Dimensions of both these matrices should match If this condition is not fulfilled the matrix raises an incompaitableTypeException","title":"output:"},{"location":"cat1/#5-__sub__-operator-method","text":"syntax def __sub__ ( self , matrix2 ): .... details","title":"5. __sub__ ('-') operator method"},{"location":"cat1/#parameters_2","text":"matrix2 (Matrix Object): the second operand matrix","title":"parameters:"},{"location":"cat1/#output_4","text":"out : A new Matrix Object is returned Dimensions of both these matrices should match If this condition is not fulfilled the matrix raises an incompaitableTypeException","title":"output:"},{"location":"cat1/#6-__mul__-operator-method","text":"syntax def __mul__ ( self , matrix2 ): .... details","title":"6. __mul__ ('*') operator method"},{"location":"cat1/#parameters_3","text":"matrix2 (Matrix Object): the second operand matrix","title":"parameters:"},{"location":"cat1/#output_5","text":"out : A new Matrix Object is returned The matrix1 . nrow should equal matrix2.ncol for multiplication operation If this condition is not fulfilled the matrix raises an incompaitableTypeException","title":"output:"},{"location":"cat1/#7-__truediv__-operator-method","text":"syntax def __truediv__ ( self , matrix2 ): .... details","title":"7. __truediv__ ('/') operator method"},{"location":"cat1/#parameters_4","text":"matrix2 (Matrix Object): the second operand matrix","title":"parameters:"},{"location":"cat1/#output_6","text":"out : An divisionErrorException is Raised","title":"output:"},{"location":"cat1/#8-__floordiv__-operator-method","text":"syntax def __floordiv__ ( self , matrix2 ): .... details","title":"8. __floordiv__ ('//') operator method"},{"location":"cat1/#parameters_5","text":"matrix2 (Matrix Object): the second operand matrix","title":"parameters:"},{"location":"cat1/#output_7","text":"out : An divisionErrorException is Raised","title":"output:"},{"location":"cat1/#9-__pow__-operator-method","text":"syntax def __pow__ ( self , times ): .... details","title":"9. __pow__ ('**') operator method"},{"location":"cat1/#parameters_6","text":"times (int): The power value","title":"parameters:"},{"location":"cat1/#output_8","text":"out : The same Matrix Object is returned The matrix should be a square Matrix by nature If this condition is not fulfilled the matrix raises an incompaitableTypeException self.isSquareMatrix() method is accessed to verify the nature Refer Matrix Module -> isSquareMatrix()","title":"output:"},{"location":"cat1/#10-__abs__-abs-builtin-method","text":"syntax def __abs__ ( self ): .... details","title":"10. __abs__ (abs()) Builtin method"},{"location":"cat1/#output_9","text":"out : The determinant value is returned (float/int) The matrix should be a square Matrix by nature If this condition is not fulfilled the matrix raises an incompaitableTypeException self.isSquareMatrix() method is accessed to verify the nature Refer Matrix Module -> isSquareMatrix() self.determinantValue() method is accessed to return the determinant value Refer Matrix Module -> determinantValue()","title":"output:"},{"location":"cat1/#11-__mod__-operator-method","text":"syntax def __mod__ ( self , matrix2 ): .... details","title":"11. __mod__ ('%') operator method"},{"location":"cat1/#parameters_7","text":"matrix2 (Matrix Object): the second operand matrix","title":"parameters:"},{"location":"cat1/#output_10","text":"out : An divisionErrorException is Raised","title":"output:"},{"location":"cat1/#12-__lshift__-operator-method","text":"syntax def __lshift__ ( self , number ): ....","title":"12. __lshift__ ('&gt;&gt;') operator Method"},{"location":"cat1/#output_11","text":"out : An bitWiseOnMatrix Exception is Raised","title":"output:"},{"location":"cat1/#13-__rshift__-operator-method","text":"syntax def __rshift__ ( self , number ): .... details","title":"13. __rshift__ ('&lt;&lt;') operator Method"},{"location":"cat1/#output_12","text":"out : An bitWiseOnMatrix Exception is Raised","title":"output:"},{"location":"cat1/#14-__and__-operator-method","text":"syntax def __and__ ( self , Matrix2 ): .... details","title":"14. __and__ ('&amp;') operator Method"},{"location":"cat1/#parameters_8","text":"matrix2 (Matrix Object): the second operand matrix","title":"parameters:"},{"location":"cat1/#output_13","text":"out : An bitWiseOnMatrix Exception is Raised","title":"output:"},{"location":"cat1/#15-__or__-operator-method","text":"syntax def __or__ ( self , Matrix2 ): .... details","title":"15. __or__ ('|') operator Method"},{"location":"cat1/#parameters_9","text":"matrix2 (Matrix Object): the second operand matrix","title":"parameters:"},{"location":"cat1/#output_14","text":"out : An bitWiseOnMatrix Exception is Raised","title":"output:"},{"location":"cat1/#16-__xor__-operator-method","text":"syntax def __xor__ ( self , Matrix2 ): .... details","title":"16. __xor__ ('^') operator Method"},{"location":"cat1/#parameters_10","text":"matrix2 (Matrix Object): the second operand matrix","title":"parameters:"},{"location":"cat1/#output_15","text":"out : An bitWiseOnMatrix Exception is Raised","title":"output:"},{"location":"cat1/#17-__invert__-operator-method","text":"syntax def __invert__ ( self ): .... details","title":"17. __invert__ ('!') operator Method"},{"location":"cat1/#output_16","text":"out : An bitWiseOnMatrix Exception is Raised","title":"output:"},{"location":"cat1/#18-__eq__-operator-method","text":"syntax def __eq__ ( self , Matrix2 ): .... details","title":"18. __eq__ ('==') operator Method"},{"location":"cat1/#parameters_11","text":"matrix2 (Matrix Object): the second operand matrix","title":"parameters:"},{"location":"cat1/#output_17","text":"out : A Boolean Value is returned based on the equality of indivisual values","title":"output:"},{"location":"cat1/#19-__trunc__-trunc-builtin-method","text":"Description The trunc function behaves as a ceiling function for negative number and floor function for positive number. syntax def __trunc__ ( self ): .... details","title":"19. __trunc__ (trunc()) Builtin Method"},{"location":"cat1/#output_18","text":"out : Returns a Matrix Object with Truncated Values.","title":"output:"},{"location":"cat1/#20-__floor__-floor-builtin-method","text":"Description The floor function floors the value for a float numbers in the matrix. syntax def __floor__ ( self ): .... details","title":"20. __floor__    (floor()) Builtin Method"},{"location":"cat1/#output_19","text":"out : Returns a Matrix Object with Floored Values.","title":"output:"},{"location":"cat1/#21-__ceil__-ceil-builtin-method","text":"Description The ceil function ceils the value for a float numbers in the matrix. syntax def __ceil__ ( self ): .... details","title":"21. __ceil__     (ceil()) Builtin Method"},{"location":"cat1/#output_20","text":"out : Returns a Matrix Object with Ceilated Values.","title":"output:"},{"location":"cat2/","text":"Category 2 Methods 1. equals method syntax def equals ( self , matrix2 ): .... details parameters: matrix2 (MatrixType) : The second matrix to be compared with output: out : A Boolean True or False is returned depending on the equality parameters considered Data,dimensions are the only factors of matrixdata compared for equality. 2. isSquareMatrix method syntax def isSquareMatrix ( self ): .... details output: out : A Boolean True or False is returned depending on the dimensions parameters considered Dimension factors of matrixdata considered. 3. isInvertible method syntax def isInvertible ( self ): .... details output: out : A Boolean True or False is returned depending on the singularity/determinant parameters considered singularity/invertibility or determinant factors of matrixdata compared for singularity check.","title":"Matrix Analysis Methods"},{"location":"cat2/#category-2-methods","text":"","title":"Category 2 Methods"},{"location":"cat2/#1-equals-method","text":"syntax def equals ( self , matrix2 ): .... details","title":"1. equals method"},{"location":"cat2/#parameters","text":"matrix2 (MatrixType) : The second matrix to be compared with","title":"parameters:"},{"location":"cat2/#output","text":"out : A Boolean True or False is returned depending on the equality parameters considered Data,dimensions are the only factors of matrixdata compared for equality.","title":"output:"},{"location":"cat2/#2-issquarematrix-method","text":"syntax def isSquareMatrix ( self ): .... details","title":"2. isSquareMatrix method"},{"location":"cat2/#output_1","text":"out : A Boolean True or False is returned depending on the dimensions parameters considered Dimension factors of matrixdata considered.","title":"output:"},{"location":"cat2/#3-isinvertible-method","text":"syntax def isInvertible ( self ): .... details","title":"3. isInvertible method"},{"location":"cat2/#output_2","text":"out : A Boolean True or False is returned depending on the singularity/determinant parameters considered singularity/invertibility or determinant factors of matrixdata compared for singularity check.","title":"output:"},{"location":"cat3/","text":"","title":"Intra-Matrix Methods"},{"location":"cat4/","text":"","title":"Inter-Matrix Methods"},{"location":"cat5/","text":"","title":"Matrix Transformations"},{"location":"cat6/","text":"","title":"Statistical Methods"},{"location":"cat7/","text":"","title":"Supplementary Methods"},{"location":"cat8/","text":"","title":"Binary/Boolean Logic Methods"},{"location":"cat9/","text":"","title":"Logical Shift Methods"},{"location":"catb1/","text":"","title":"Base Class Methods"},{"location":"cate1/","text":"","title":"Cate1"},{"location":"catv0/","text":"","title":"category 0"},{"location":"documentation/","text":"Introduction Categorization Of Methods Category 0: Matrix DataType The Core Mechanism which is used to store the Matrix Object Data. Having Applied Elements of Dynamic Programming , It is quite effective in making decisions when it comes to calculating certain values in a cost effective way and on the other hand maintains a Character Profile of the Matrix . All The Matrix Data is stored here which allows for implementing Dynamic Programming Principles such as Memoization: Property Description 1. nrow [int] Number of Rows 2. ncol [int] Number of Columns 3. dimensions [list] list format of nrow,ncol together 4. data [list] All the Matrix Values stored in nested-list format 5. invertibility [Boolean] returns True if matrix is invertible ,default-value=None 6. determinant [int] stores determinant value,default-value=None 7. singular [Boolean] returns False if matrix is invertible ,default-value=None 8. eigenvals [list] list of eigen values 9. eigenvects [list] list of eigen vectors 10. rank [int] stores the rank of the matrix 11. triangularity [int] returns 2 for upperT. ,1 for lowerT.,0 for No Triangularity 12. binaryMatrix [Boolean] returns True if binary matrix//reserved for binary matrix class 13. singularvalue [int/float] returns singular value,None By default 14. orthogonalMatrix [Boolean] returns True if matrix is orthogonal in nature 15. minor [list] contains minor values,By default None 16. listifieddata [list] contains all the data values in a flattened list 17. classType [str] defines the type of pyrix/matrix implementation(occours in inheriting classes) 18. symmetry [Boolean] True for symmetrical,None by default,False otherwise Category 1: Base Class Methods and Operator Overriding Methods These Methods are extensions for adding operator support to custom Matrix object type. Method Description 1. __init__ Initializer constructor method 2. __repr__ Describes/represents the object and returns sensible/expected values. 3. __str__ String value of the Object. 4. __add__ Addition of two matrices [ operator override ]. 5. __sub__ Subtraction of two matrices [ operator override ]. 6. __mul__ Multiplication of two matrices [ operator override ]. 7. __truediv__ Dummy Method to prevent operator failure [ operator override ]. 8. __floordiv__ Dummy Method to prevent operator failure [ operator override ]. 9. __pow__ Raises a matrix to the specified power. 10. __abs__ Returns the absolute or determinant value of the matrix. 11. __mod__ Dummy Method to prevent operator misuse raises divisionErrorException exception [ operator override ]. 12. __lshift__ Dummy Method to prevent operator misuse raises bitWiseOnMatrix exception [ operator override ]. 13. __rshift__ Dummy Method to prevent operator misuse raises bitWiseOnMatrix exception [ operator override ]. 14. __and__ Dummy Method to prevent operator misuse raises bitWiseOnMatrix exception [ operator override ]. 15. __or__ Dummy Method to prevent operator misuse raises bitWiseOnMatrix exception [ operator override ]. 16. __xor__ Dummy Method to prevent operator misuse raises bitWiseOnMatrix exception [ operator override ]. 17. __invert__ Dummy Method to prevent operator misuse raises bitWiseOnMatrix exception [ operator override ]. 18. __eq__ returns boolean values based on matrix equality. 19. __floor__ 20. __ceil__ 21. __trunc__ Category 2 : Matrix Analysis Methods These methods are useful for analyzing charactaristicts of the matrix for some interpretation and helps saving computation costs in certain cases. Method Description 1. equals Checks for equality of the two matrices based on dimensions and the data inside. Returns a Boolean Value. 2. isSquareMatrix Checks if the Matrix is a square Matrix or not. A square matrix is a matrix with equal number of rows and cols. Returns a Boolean value. 3. isInvertible Checks if the Matrix is an Invertible Matrix or not .An Invertible matrix is a matrix with a non zero determinant .Returns a Boolean value. 4. isUpperTriangular This method determines whether a Matrix is a Upper Triangular matrix or not . Returns a Boolean value 5. isLowerTriangular This method determines whether a Matrix is a Lower Triangular matrix or not . Returns a Boolean value 6. isSymmetricMatrix 7. isOrthogonalMatrix 8. getRow Selects a Row of the matrix of specified index .Returns a list of the values. 9. getCol Selects a Column of the matrix of specified index .Returns a list(or nested list) of the values. 10. RoundOff Rounds off the Value of the data in the matrix object to the given extent .Returns NoneType and should not be assigned to a variable. 11. scaleMatrix Scales the Value of the data in the matrix object by the scalar value .Returns NoneType and should not be assigned to a variable. 12. determinantValue Determines the determinant value of the matrix object .Returns int or float depending on the outcome. 13. __determinantHelper This Method specifically helps with recursive implementation of determinant algorithm. 14. matrixRank Calculates the Rank of the matrix object .Returns integer value of rank. 15. matrixTrace The trace of a square matrix is defined to be the sum of elements on the main diagonal of a Matrix. Returns a Int/float value. 16. minorSpecific Finds a specific minor value for a certain position.Returns a Int/Float Value. 17. getAllMinors Finds all the minor values of the matrix object. Returns a new Matrix Object of minors. 18. cofactorSpecific Finds a specific cofactor Value of a certain position. Returns a Int/Float Value. 19. getAllCofactors Finds all the cofactor values of the matrix object. Returns a new Matrix Object of cofactors. 20. __minor Finds minor values (Private method) . Returns a nested list of minors 21. __cofactor Finds cofactor values (Private method). Returns a nested list of cofactors. 22. __minor2x2 Finds minor values for 2x2 matrices (Private method). Returns a nested list. 23. __matrixsplitter Category 3 : Intra-Matrix Methods These Methods deal with Row and Column operations on the same matrix. Method Description 1. addRow Adds row values of one matrix to same matrix .Returns NoneType and should not be assigned to a variable. 2. subRow Subtracts row values of one matrix to same matrix .Returns NoneType and should not be assigned to a variable Category 4: Inter-Matrix Methods These Methods deal with Row and Column operations on different matrices Method Description 1. addRows Adds row values of one matrix to another matrix Returns NoneType and should not be assigned to a variable. 2. subRows Subtracts row values of one matrix to another matrix .Returns NoneType and should not be assigned to a variable. Category 5: Matrix Transformations These Methods apply to matrices where they are transformed in some way or the other Method Description 1. invertMatrix Creates an Inverse Matrix of the given matrix .Returns a Matrix object. 2. __verify This method verifies a inverse of the matrix by multiplying it with the original input matrix to get identity matrix. 3. rowEchleonTransform 4. RrowEchleonTransform 5. transposeTransform Transpose of the original matrix is created. Returns a Matrix Object. 6. adjointTransform 7. __row__add An internal method for adding row values.[ \"legacy method\" ] 8. __row__sub An internal method for subtracting row values.[ \"legacy method\" ] 9. __row__mult An internal method for scaling a specific row with a value.[ \"legacy method\" ] 10. __scalarDivideRow An internal method for scaling down a row.[ \"legacy method\" ] Category 6: Statistical Methods These Methods perform statistical operations over the matrix Method Description 1. globalMean Finds the mean value of all data points in the matrix. 2. globalMedian Finds the median value of all data points in the matrix. 3. globalMode Finds the Mode value of all data points in the matrix. 4. localRowMean Finds the mean value of all data points in the matrix for a specified row. 5. localRowMedian Finds the median value of all data points in the matrix for a specified row. 6. localRowMode Finds the Mode value of all data points in the matrix for a specified row. 7. localColumnMean Finds the mean value of all data points in the matrix for a specified column. 8. localColumnMedian Finds the median value of all data points in the matrix for a specified column. 9. localColumnMode Finds the Mode value of all data points in the matrix for a specified column. Category 7: Supplementary Methods A few of the Extras Methods Method Description 1. vectorMultiplication Vector multiplication with a compatible matrix object.[ Experimental method ] Util Methods A few ways to create a new matrix object Method Description 1. zeroMatrix Create a zero matrix of the given dimensions. Returns a Matrix Object. 2. unitMatrix Create a unit matrix of the given dimensions. Returns a Matrix Object . 3. identityMatrix Create a identity matrix of the given dimensions Works for square Matrices . Retuns a Matrix Object. 4. randomMatrix Aids in creating Pseudo-Random matrix of an estimated size and dimensions with options to configure paramaters. 5. copy Creates a DEEP(HARD) copy of the Matrix object. Returns a Matrix Object","title":"Introduction"},{"location":"documentation/#introduction","text":"","title":"Introduction"},{"location":"documentation/#categorization-of-methods","text":"","title":"Categorization Of Methods"},{"location":"documentation/#category-0-matrix-datatype","text":"The Core Mechanism which is used to store the Matrix Object Data. Having Applied Elements of Dynamic Programming , It is quite effective in making decisions when it comes to calculating certain values in a cost effective way and on the other hand maintains a Character Profile of the Matrix . All The Matrix Data is stored here which allows for implementing Dynamic Programming Principles such as Memoization: Property Description 1. nrow [int] Number of Rows 2. ncol [int] Number of Columns 3. dimensions [list] list format of nrow,ncol together 4. data [list] All the Matrix Values stored in nested-list format 5. invertibility [Boolean] returns True if matrix is invertible ,default-value=None 6. determinant [int] stores determinant value,default-value=None 7. singular [Boolean] returns False if matrix is invertible ,default-value=None 8. eigenvals [list] list of eigen values 9. eigenvects [list] list of eigen vectors 10. rank [int] stores the rank of the matrix 11. triangularity [int] returns 2 for upperT. ,1 for lowerT.,0 for No Triangularity 12. binaryMatrix [Boolean] returns True if binary matrix//reserved for binary matrix class 13. singularvalue [int/float] returns singular value,None By default 14. orthogonalMatrix [Boolean] returns True if matrix is orthogonal in nature 15. minor [list] contains minor values,By default None 16. listifieddata [list] contains all the data values in a flattened list 17. classType [str] defines the type of pyrix/matrix implementation(occours in inheriting classes) 18. symmetry [Boolean] True for symmetrical,None by default,False otherwise","title":"Category 0: Matrix DataType"},{"location":"documentation/#category-1-base-class-methods-and-operator-overriding-methods","text":"These Methods are extensions for adding operator support to custom Matrix object type. Method Description 1. __init__ Initializer constructor method 2. __repr__ Describes/represents the object and returns sensible/expected values. 3. __str__ String value of the Object. 4. __add__ Addition of two matrices [ operator override ]. 5. __sub__ Subtraction of two matrices [ operator override ]. 6. __mul__ Multiplication of two matrices [ operator override ]. 7. __truediv__ Dummy Method to prevent operator failure [ operator override ]. 8. __floordiv__ Dummy Method to prevent operator failure [ operator override ]. 9. __pow__ Raises a matrix to the specified power. 10. __abs__ Returns the absolute or determinant value of the matrix. 11. __mod__ Dummy Method to prevent operator misuse raises divisionErrorException exception [ operator override ]. 12. __lshift__ Dummy Method to prevent operator misuse raises bitWiseOnMatrix exception [ operator override ]. 13. __rshift__ Dummy Method to prevent operator misuse raises bitWiseOnMatrix exception [ operator override ]. 14. __and__ Dummy Method to prevent operator misuse raises bitWiseOnMatrix exception [ operator override ]. 15. __or__ Dummy Method to prevent operator misuse raises bitWiseOnMatrix exception [ operator override ]. 16. __xor__ Dummy Method to prevent operator misuse raises bitWiseOnMatrix exception [ operator override ]. 17. __invert__ Dummy Method to prevent operator misuse raises bitWiseOnMatrix exception [ operator override ]. 18. __eq__ returns boolean values based on matrix equality. 19. __floor__ 20. __ceil__ 21. __trunc__","title":"Category 1: Base Class Methods and Operator Overriding Methods"},{"location":"documentation/#category-2-matrix-analysis-methods","text":"These methods are useful for analyzing charactaristicts of the matrix for some interpretation and helps saving computation costs in certain cases. Method Description 1. equals Checks for equality of the two matrices based on dimensions and the data inside. Returns a Boolean Value. 2. isSquareMatrix Checks if the Matrix is a square Matrix or not. A square matrix is a matrix with equal number of rows and cols. Returns a Boolean value. 3. isInvertible Checks if the Matrix is an Invertible Matrix or not .An Invertible matrix is a matrix with a non zero determinant .Returns a Boolean value. 4. isUpperTriangular This method determines whether a Matrix is a Upper Triangular matrix or not . Returns a Boolean value 5. isLowerTriangular This method determines whether a Matrix is a Lower Triangular matrix or not . Returns a Boolean value 6. isSymmetricMatrix 7. isOrthogonalMatrix 8. getRow Selects a Row of the matrix of specified index .Returns a list of the values. 9. getCol Selects a Column of the matrix of specified index .Returns a list(or nested list) of the values. 10. RoundOff Rounds off the Value of the data in the matrix object to the given extent .Returns NoneType and should not be assigned to a variable. 11. scaleMatrix Scales the Value of the data in the matrix object by the scalar value .Returns NoneType and should not be assigned to a variable. 12. determinantValue Determines the determinant value of the matrix object .Returns int or float depending on the outcome. 13. __determinantHelper This Method specifically helps with recursive implementation of determinant algorithm. 14. matrixRank Calculates the Rank of the matrix object .Returns integer value of rank. 15. matrixTrace The trace of a square matrix is defined to be the sum of elements on the main diagonal of a Matrix. Returns a Int/float value. 16. minorSpecific Finds a specific minor value for a certain position.Returns a Int/Float Value. 17. getAllMinors Finds all the minor values of the matrix object. Returns a new Matrix Object of minors. 18. cofactorSpecific Finds a specific cofactor Value of a certain position. Returns a Int/Float Value. 19. getAllCofactors Finds all the cofactor values of the matrix object. Returns a new Matrix Object of cofactors. 20. __minor Finds minor values (Private method) . Returns a nested list of minors 21. __cofactor Finds cofactor values (Private method). Returns a nested list of cofactors. 22. __minor2x2 Finds minor values for 2x2 matrices (Private method). Returns a nested list. 23. __matrixsplitter","title":"Category 2 : Matrix Analysis Methods"},{"location":"documentation/#category-3-intra-matrix-methods","text":"These Methods deal with Row and Column operations on the same matrix. Method Description 1. addRow Adds row values of one matrix to same matrix .Returns NoneType and should not be assigned to a variable. 2. subRow Subtracts row values of one matrix to same matrix .Returns NoneType and should not be assigned to a variable","title":"Category 3 : Intra-Matrix Methods"},{"location":"documentation/#category-4-inter-matrix-methods","text":"These Methods deal with Row and Column operations on different matrices Method Description 1. addRows Adds row values of one matrix to another matrix Returns NoneType and should not be assigned to a variable. 2. subRows Subtracts row values of one matrix to another matrix .Returns NoneType and should not be assigned to a variable.","title":"Category 4: Inter-Matrix Methods"},{"location":"documentation/#category-5-matrix-transformations","text":"These Methods apply to matrices where they are transformed in some way or the other Method Description 1. invertMatrix Creates an Inverse Matrix of the given matrix .Returns a Matrix object. 2. __verify This method verifies a inverse of the matrix by multiplying it with the original input matrix to get identity matrix. 3. rowEchleonTransform 4. RrowEchleonTransform 5. transposeTransform Transpose of the original matrix is created. Returns a Matrix Object. 6. adjointTransform 7. __row__add An internal method for adding row values.[ \"legacy method\" ] 8. __row__sub An internal method for subtracting row values.[ \"legacy method\" ] 9. __row__mult An internal method for scaling a specific row with a value.[ \"legacy method\" ] 10. __scalarDivideRow An internal method for scaling down a row.[ \"legacy method\" ]","title":"Category 5: Matrix Transformations"},{"location":"documentation/#category-6-statistical-methods","text":"These Methods perform statistical operations over the matrix Method Description 1. globalMean Finds the mean value of all data points in the matrix. 2. globalMedian Finds the median value of all data points in the matrix. 3. globalMode Finds the Mode value of all data points in the matrix. 4. localRowMean Finds the mean value of all data points in the matrix for a specified row. 5. localRowMedian Finds the median value of all data points in the matrix for a specified row. 6. localRowMode Finds the Mode value of all data points in the matrix for a specified row. 7. localColumnMean Finds the mean value of all data points in the matrix for a specified column. 8. localColumnMedian Finds the median value of all data points in the matrix for a specified column. 9. localColumnMode Finds the Mode value of all data points in the matrix for a specified column.","title":"Category 6: Statistical Methods"},{"location":"documentation/#category-7-supplementary-methods","text":"A few of the Extras Methods Method Description 1. vectorMultiplication Vector multiplication with a compatible matrix object.[ Experimental method ]","title":"Category 7: Supplementary Methods"},{"location":"documentation/#util-methods","text":"A few ways to create a new matrix object Method Description 1. zeroMatrix Create a zero matrix of the given dimensions. Returns a Matrix Object. 2. unitMatrix Create a unit matrix of the given dimensions. Returns a Matrix Object . 3. identityMatrix Create a identity matrix of the given dimensions Works for square Matrices . Retuns a Matrix Object. 4. randomMatrix Aids in creating Pseudo-Random matrix of an estimated size and dimensions with options to configure paramaters. 5. copy Creates a DEEP(HARD) copy of the Matrix object. Returns a Matrix Object","title":"Util Methods"},{"location":"exceptint/","text":"","title":"introduction"},{"location":"gen/","text":"General Introduction Pyrix Module/Package has been split up into several Sub-Modules\\Packages . Hence you will find that these are scattered into logically seperated units, This way it is easier to know where you are going with the imports and which functionality you need is clearly described hence reduction in unwanted imports. 1. Matrix Module This is the heart and soul of Pyrix Module. The main class which defines the base matrix and all the methods which serve as the basic functionalities which later come handy. 2. BinaryMatrix Module Somewhat unique to pyrix and matrices in general , this sub module is a Unique, Explicit way of manipulating matrices with binary numbers. Some of the abstract concepts of binary logic, bitwise logic has been well crafted into this sub module and it aims to provide easier and more fun approach to work with Binary matrices. 3. MatrixEquation Module Somewhere ,at someplace we need to manipulate matrices in form of equations and none other than this module was born out of necessity for a well implemented Matrix Equation solver. 4. Vector Module Vector and Matrix go hand in hand in many fields and subjects . Hence a Matrix representation of Vectors is a Undeniably powerfull tool with those aspects. Some Vector specific methods have also been added to make it more convinient to use . 5. Exceptions Guide Quote \"At the end of the day the user has to correct its mistakes , so the best a Software can do is highlight the issue and describe it.\" Exceptions come handy in these situiations and make pyrix more comprehensive and fail proof . User also gets some exception handling goodness and the end products are well refined.","title":"General Introduction"},{"location":"gen/#general-introduction","text":"Pyrix Module/Package has been split up into several Sub-Modules\\Packages . Hence you will find that these are scattered into logically seperated units, This way it is easier to know where you are going with the imports and which functionality you need is clearly described hence reduction in unwanted imports.","title":"General Introduction"},{"location":"gen/#1-matrix-module","text":"This is the heart and soul of Pyrix Module. The main class which defines the base matrix and all the methods which serve as the basic functionalities which later come handy.","title":"1. Matrix Module"},{"location":"gen/#2-binarymatrix-module","text":"Somewhat unique to pyrix and matrices in general , this sub module is a Unique, Explicit way of manipulating matrices with binary numbers. Some of the abstract concepts of binary logic, bitwise logic has been well crafted into this sub module and it aims to provide easier and more fun approach to work with Binary matrices.","title":"2. BinaryMatrix Module"},{"location":"gen/#3-matrixequation-module","text":"Somewhere ,at someplace we need to manipulate matrices in form of equations and none other than this module was born out of necessity for a well implemented Matrix Equation solver.","title":"3. MatrixEquation Module"},{"location":"gen/#4-vector-module","text":"Vector and Matrix go hand in hand in many fields and subjects . Hence a Matrix representation of Vectors is a Undeniably powerfull tool with those aspects. Some Vector specific methods have also been added to make it more convinient to use .","title":"4. Vector Module"},{"location":"gen/#5-exceptions-guide","text":"Quote \"At the end of the day the user has to correct its mistakes , so the best a Software can do is highlight the issue and describe it.\" Exceptions come handy in these situiations and make pyrix more comprehensive and fail proof . User also gets some exception handling goodness and the end products are well refined.","title":"5. Exceptions Guide"},{"location":"geninfo/","text":"","title":"General Info"},{"location":"meqint/","text":"Equational Methods These Methods add capability to manipulate matrix equations Method Description 1. ACRTransform 2. ALUTransform 3. AQRTransform 4. LUDecomposition 5. eigenTerms 6. singularValue 7. augmentedMatrix 8. orthogonaleigenVectors 9. jordanGuassElimination","title":"Meqint"},{"location":"meqint/#equational-methods","text":"These Methods add capability to manipulate matrix equations Method Description 1. ACRTransform 2. ALUTransform 3. AQRTransform 4. LUDecomposition 5. eigenTerms 6. singularValue 7. augmentedMatrix 8. orthogonaleigenVectors 9. jordanGuassElimination","title":"Equational Methods"},{"location":"progress/","text":"Documentation Status SiteMap Home Release History Documentation General Introduction Matrix SubModule Introduction Matrix DataType Base Class Methods Matrix Analysis Methods Intra Matrix Methods Inter Matrix Methods Matrix Transformations Statistical Methods Supplementary Methods Binary Matrix SubModule Introduction Base class Methods Binary/Boolean Logic Methods Logical Shift Methods Charactar Matrix SubModule Vector Submodule Exceptions Guide User Guide","title":"Status"},{"location":"progress/#documentation-status","text":"","title":"Documentation Status"},{"location":"progress/#sitemap","text":"Home Release History Documentation General Introduction Matrix SubModule Introduction Matrix DataType Base Class Methods Matrix Analysis Methods Intra Matrix Methods Inter Matrix Methods Matrix Transformations Statistical Methods Supplementary Methods Binary Matrix SubModule Introduction Base class Methods Binary/Boolean Logic Methods Logical Shift Methods Charactar Matrix SubModule Vector Submodule Exceptions Guide User Guide","title":"SiteMap"},{"location":"vint/","text":"","title":"introduction"}]}